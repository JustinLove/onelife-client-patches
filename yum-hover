diff --git a/gameSource/LivingLifePage.cpp b/gameSource/LivingLifePage.cpp
index d5905b2ba..f3d37249b 100644
--- a/gameSource/LivingLifePage.cpp
+++ b/gameSource/LivingLifePage.cpp
@@ -236,6 +236,40 @@ void initKeybinds() {
     }
 
 
+typedef enum yumType {
+    YT_INEDIBLE,
+    YT_MEH,
+    YT_YUM,
+    YT_COUNT,
+    } yumType;
+
+SimpleVector<int> yummyFoodChain;
+int* becomesFoodID;
+static char showYumHover = false;
+
+static void initBecomesFood();
+
+static yumType isYummy( int inObjectID ) {
+    if( inObjectID < 0 ) {
+        return YT_INEDIBLE;
+        }
+
+    int objectID = becomesFoodID[inObjectID];
+
+    if( objectID < 0 ) {
+        return YT_INEDIBLE;
+        }
+
+    for( int i=0; i<yummyFoodChain.size(); i++ ) {
+        if( objectID == yummyFoodChain.getElementDirect(i) ) {
+            return YT_MEH;
+            }
+        }
+    return YT_YUM;
+    }
+
+
+
 static int screenCenterPlayerOffsetX, screenCenterPlayerOffsetY;
 
 
@@ -3082,6 +3116,10 @@ LivingLifePage::LivingLifePage()
 
     initKeybinds();
     
+    showYumHover = SettingsManager::getIntSetting( "showYumHover", 1 );
+
+    initBecomesFood();
+
     initLiveTriggers();
 
     initNames();
@@ -4761,6 +4799,11 @@ void LivingLifePage::drawMapCell( int inMapI,
         for( int i=startPass; i<numPasses; i++ ) {
             
             doublePair passPos = pos;
+
+            yumType yummy = YT_INEDIBLE;
+            if( showYumHover ) {
+                yummy = isYummy( oID );
+                }
             
             if( highlight ) {
                 
@@ -4960,8 +5003,8 @@ void LivingLifePage::drawMapCell( int inMapI,
 
         if( highlight ) {
             
-            
             float mainFade = .35f;
+            float yumFade = .5f;
         
             toggleAdditiveBlend( true );
             
@@ -4981,7 +5024,17 @@ void LivingLifePage::drawMapCell( int inMapI,
                     // opaque portion
                     startDrawingThroughStencil( false );
 
-                    setDrawColor( 1, 1, 1, highlightFade * mainFade );
+                    switch( yummy ) {
+                        case YT_YUM:
+                            setDrawColor( 0, 1, 0, highlightFade * yumFade );
+                            break;
+                        case YT_MEH:
+                            setDrawColor( 1, 0, 0, highlightFade * yumFade );
+                            break;
+                        default:
+                            setDrawColor( 1, 1, 1, highlightFade * mainFade );
+                            break;
+                        }
                     
                     drawSquare( squarePos, squareRad );
                     
@@ -4995,7 +5048,17 @@ void LivingLifePage::drawMapCell( int inMapI,
                     // now first fringe is isolated in stencil
                     startDrawingThroughStencil( false );
 
-                    setDrawColor( 1, 1, 1, highlightFade * mainFade * .5 );
+                    switch( yummy ) {
+                        case YT_YUM:
+                            setDrawColor( 0, 1, 0, highlightFade * yumFade * .5 );
+                            break;
+                        case YT_MEH:
+                            setDrawColor( 1, 0, 0, highlightFade * yumFade * .5);
+                            break;
+                        default:
+                            setDrawColor( 1, 1, 1, highlightFade * mainFade * .5);
+                            break;
+                        }
 
                     drawSquare( squarePos, squareRad );
 
@@ -5009,7 +5072,17 @@ void LivingLifePage::drawMapCell( int inMapI,
                     // now second fringe is isolated in stencil
                     startDrawingThroughStencil( false );
                     
-                    setDrawColor( 1, 1, 1, highlightFade * mainFade *.25 );
+                    switch( yummy ) {
+                        case YT_YUM:
+                            setDrawColor( 0, 1, 0, highlightFade * yumFade * .25 );
+                            break;
+                        case YT_MEH:
+                            setDrawColor( 1, 0, 0, highlightFade * yumFade * .25);
+                            break;
+                        default:
+                            setDrawColor( 1, 1, 1, highlightFade * mainFade * .25);
+                            break;
+                        }
                     
                     drawSquare( squarePos, squareRad );
                     
@@ -11269,6 +11342,22 @@ void LivingLifePage::draw( doublePair inViewCenter,
                         desToDelete = des;
                         }
                     }
+                else if( showYumHover ) {
+                    switch( isYummy( idToDescribe ) ) {
+                        case YT_YUM:
+                            des = autoSprintf( "%s - %s",
+                                               des, translate( "yum" ) );
+                            desToDelete = des;
+                            break;
+                        case YT_MEH:
+                            des = autoSprintf( "%s - %s",
+                                               des, translate( "meh" ) );
+                            desToDelete = des;
+                            break;
+                        default:
+                            break;
+                        }
+                    }
 
                 
 
@@ -12732,6 +12821,88 @@ char *LivingLifePage::getHintMessage( int inObjectID, int inIndex,
 
 
 
+static int becomesFood( int objectID, int depth ) {
+    if( objectID < 0) return -1;
+
+    ObjectRecord* obj = getObject( objectID );
+    if( obj == NULL ) return -1;
+
+    if( obj->yumParentID != -1 ) {
+        return obj->yumParentID;
+        }
+
+    if( obj->isUseDummy ) {
+        objectID = obj->useDummyParent;
+        obj = getObject( objectID );
+        }
+
+    if( obj->foodValue > 0 ) {
+        return objectID;
+        }
+
+    if( depth < 1) return -1;
+
+    SimpleVector<TransRecord*> *trans = getAllUses( objectID );
+    if( trans == NULL ) return -1;
+
+    if( trans->size() < 1 ) return -1;
+
+    if( trans->size() == 1) {
+        TransRecord* t = trans->getElementDirect( 0 );
+        if( ! getTransHintable( t ) ) return -1;
+
+        int targetEdible = becomesFood( t->newTarget, depth - 1 );
+        if( targetEdible > 0 ) return targetEdible;
+
+        int actorEdible = becomesFood( t->newActor, depth - 1 );
+        if( actorEdible > 0 ) return actorEdible;
+        }
+    else { // trans > 1
+        int lastTarget = -1;
+        int targetCount = 0;
+        int lastActor = -1;
+        int actorCount = 0;
+        for( int i = 0; i<trans->size(); i++) {
+            TransRecord* t = trans->getElementDirect( i );
+            if( ! getTransHintable( t ) ) continue;
+
+            if( t->newActor != lastActor ) {
+                actorCount += 1;
+                }
+            lastActor = t->newActor;
+
+            if( t->newTarget != lastTarget ) {
+                targetCount += 1;
+                }
+            lastTarget = t->newTarget;
+
+            //int actorEdible = becomesFood( t->newActor, 0 );
+            //if( actorEdible > 0 ) return actorEdible;
+            }
+
+        if( actorCount == 1) {
+            int actorEdible = becomesFood( lastActor, depth - 1 );
+            if( actorEdible > 0 ) return actorEdible;
+            }
+        if( targetCount == 1) {
+            int targetEdible = becomesFood( lastTarget, depth - 1 );
+            if( targetEdible > 0 ) return targetEdible;
+            }
+        }
+
+    return -1;
+    }
+
+static void initBecomesFood() {
+    int mapSize = getMaxObjectID() + 1;
+    becomesFoodID = new int[mapSize];
+    for (int i=0; i<mapSize; i++) {
+      becomesFoodID[i] = becomesFood( i, 3 );
+    }
+}
+
+
+
 // inNewID > 0
 static char shouldCreationSoundPlay( int inOldID, int inNewID ) {
     if( inOldID == inNewID ) {
@@ -21030,6 +21201,9 @@ void LivingLifePage::step() {
                     }
                 
                 if( mYumMultiplier != oldYumMultiplier ) {
+                    if( mYumMultiplier == 0 ) {
+                        yummyFoodChain.deleteAll();
+                        }
                     int oldSlipIndex = -1;
                     int newSlipIndex = 0;
                     
@@ -21151,6 +21325,15 @@ void LivingLifePage::step() {
                 
                     if( lastAteID != 0 ) {
                         ObjectRecord *lastAteObj = getObject( lastAteID );
+                        if( lastAteObj->yumParentID != -1 ) {
+                            yummyFoodChain.push_back( lastAteObj->yumParentID );
+                            }
+                        else if( lastAteObj->isUseDummy ) {
+                            yummyFoodChain.push_back( lastAteObj->useDummyParent );
+                            }
+                        else {
+                            yummyFoodChain.push_back( lastAteID );
+                            }
                         
                         char *strUpper = stringToUpperCase(
                             lastAteObj->description );
@@ -23121,6 +23304,7 @@ void LivingLifePage::makeActive( char inFresh ) {
         mYumSlipNumberToShow[i] = 0;
         }
     
+    yummyFoodChain.deleteAll();
 
     mCurrentArrowI = 0;
     mCurrentArrowHeat = -1;
diff --git a/gameSource/settings/wonlife-plus/showYumHover.ini b/gameSource/settings/wonlife-plus/showYumHover.ini
new file mode 100644
index 000000000..d00491fd7
--- /dev/null
+++ b/gameSource/settings/wonlife-plus/showYumHover.ini
@@ -0,0 +1 @@
+1
diff --git a/gameSource/settings/wonlife-vanilla/showYumHover.ini b/gameSource/settings/wonlife-vanilla/showYumHover.ini
new file mode 100644
index 000000000..573541ac9
--- /dev/null
+++ b/gameSource/settings/wonlife-vanilla/showYumHover.ini
@@ -0,0 +1 @@
+0
diff --git a/gameSource/settings/wonlife-wondible/showYumHover.ini b/gameSource/settings/wonlife-wondible/showYumHover.ini
new file mode 100644
index 000000000..d00491fd7
--- /dev/null
+++ b/gameSource/settings/wonlife-wondible/showYumHover.ini
@@ -0,0 +1 @@
+1
