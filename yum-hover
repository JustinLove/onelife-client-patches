diff --git a/gameSource/LivingLifePage.cpp b/gameSource/LivingLifePage.cpp
index 696b61f4..d431b2d6 100644
--- a/gameSource/LivingLifePage.cpp
+++ b/gameSource/LivingLifePage.cpp
@@ -215,6 +215,31 @@ void initKeybinds() {
 static char showHelpOverlay = false;
 static char showHelpOverlayKey = 'h';
 
+
+SimpleVector<int> yummyFoodChain;
+static char showYumHover = false;
+
+static char isYummy( int inObjectID ) {
+    ObjectRecord *o = getObject( inObjectID );
+
+    if( o->isUseDummy ) {
+        inObjectID = o->useDummyParent;
+        o = getObject( inObjectID );
+        }
+
+    if( o->foodValue == 0 ) {
+        return false;
+        }
+
+    for( int i=0; i<yummyFoodChain.size(); i++ ) {
+        if( inObjectID == yummyFoodChain.getElementDirect(i) ) {
+            return false;
+            }
+        }
+    return true;
+    }
+
+
 static int screenCenterPlayerOffsetX, screenCenterPlayerOffsetY;
 
 
@@ -2527,6 +2552,7 @@ LivingLifePage::LivingLifePage()
         delete [] keyString;
         }
 
+    showYumHover = SettingsManager::getIntSetting( "showYumHover", 1 );
     
     initLiveTriggers();
 
@@ -4106,6 +4132,11 @@ void LivingLifePage::drawMapCell( int inMapI,
         for( int i=startPass; i<numPasses; i++ ) {
             
             doublePair passPos = pos;
+
+            bool yummy = false;
+            if( showYumHover ) {
+                yummy = isYummy( oID );
+                }
             
             if( highlight ) {
                 
@@ -4208,8 +4239,8 @@ void LivingLifePage::drawMapCell( int inMapI,
 
         if( highlight ) {
             
-            
             float mainFade = .35f;
+            float yumFade = .7f;
         
             toggleAdditiveBlend( true );
             
@@ -4229,7 +4260,17 @@ void LivingLifePage::drawMapCell( int inMapI,
                     // opaque portion
                     startDrawingThroughStencil( false );
 
-                    setDrawColor( 1, 1, 1, highlightFade * mainFade );
+                    if( showYumHover && obj->foodValue > 0 ) {
+                        if( yummy ) {
+                            setDrawColor( 0, 1, 0, highlightFade * yumFade );
+                            }
+                        else {
+                            setDrawColor( 1, 0, 0, highlightFade * yumFade );
+                            }
+                        }
+                    else {
+                        setDrawColor( 1, 1, 1, highlightFade * mainFade );
+                        }
                     
                     drawSquare( squarePos, squareRad );
                     
@@ -4243,7 +4284,17 @@ void LivingLifePage::drawMapCell( int inMapI,
                     // now first fringe is isolated in stencil
                     startDrawingThroughStencil( false );
 
-                    setDrawColor( 1, 1, 1, highlightFade * mainFade * .5 );
+                    if( showYumHover && obj->foodValue > 0 ) {
+                        if( yummy ) {
+                            setDrawColor( 0, 1, 0, highlightFade * yumFade * .5 );
+                            }
+                        else {
+                            setDrawColor( 1, 0, 0, highlightFade * yumFade * .5 );
+                            }
+                        }
+                    else {
+                        setDrawColor( 1, 1, 1, highlightFade * mainFade * .5 );
+                        }
 
                     drawSquare( squarePos, squareRad );
 
@@ -4257,7 +4308,17 @@ void LivingLifePage::drawMapCell( int inMapI,
                     // now second fringe is isolated in stencil
                     startDrawingThroughStencil( false );
                     
-                    setDrawColor( 1, 1, 1, highlightFade * mainFade *.25 );
+                    if( showYumHover && obj->foodValue > 0 ) {
+                        if( yummy ) {
+                            setDrawColor( 0, 1, 0, highlightFade * yumFade * .25 );
+                            }
+                        else {
+                            setDrawColor( 1, 0, 0, highlightFade * yumFade * .25 );
+                            }
+                        }
+                    else {
+                        setDrawColor( 1, 1, 1, highlightFade * mainFade * .25 );
+                        }
                     
                     drawSquare( squarePos, squareRad );
                     
@@ -9225,6 +9286,18 @@ void LivingLifePage::draw( doublePair inViewCenter,
                         desToDelete = des;
                         }
                     }
+                else if( showYumHover && o->foodValue > 0 ) {
+                    if ( isYummy( idToDescribe ) ) {
+                        des = autoSprintf( "%s - %s",
+                                           des, translate( "yum" ) );
+                        desToDelete = des;
+                        }
+                    else {
+                        des = autoSprintf( "%s - %s",
+                                           des, translate( "meh" ) );
+                        desToDelete = des;
+                        }
+                    }
                 }
             
             char *stringUpper = stringToUpperCase( des );
@@ -17050,6 +17123,9 @@ void LivingLifePage::step() {
                     }
                 
                 if( mYumMultiplier != oldYumMultiplier ) {
+                    if( mYumMultiplier == 0 ) {
+                        yummyFoodChain.deleteAll();
+                        }
                     int oldSlipIndex = -1;
                     int newSlipIndex = 0;
                     
@@ -17171,6 +17247,12 @@ void LivingLifePage::step() {
                 
                     if( lastAteID != 0 ) {
                         ObjectRecord *lastAteObj = getObject( lastAteID );
+                        if( lastAteObj->isUseDummy ) {
+                            yummyFoodChain.push_back( lastAteObj->useDummyParent );
+                            }
+                        else {
+                            yummyFoodChain.push_back( lastAteID );
+                            }
                         
                         char *strUpper = stringToUpperCase(
                             lastAteObj->description );
@@ -18770,6 +18852,7 @@ void LivingLifePage::makeActive( char inFresh ) {
         mYumSlipNumberToShow[i] = 0;
         }
     
+    yummyFoodChain.deleteAll();
 
     mCurrentArrowI = 0;
     mCurrentArrowHeat = -1;
diff --git a/gameSource/settings/showYumHover.ini b/gameSource/settings/showYumHover.ini
new file mode 100644
index 00000000..d00491fd
--- /dev/null
+++ b/gameSource/settings/showYumHover.ini
@@ -0,0 +1 @@
+1
