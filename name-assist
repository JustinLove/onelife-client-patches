diff --git a/gameSource/LivingLifePage.cpp b/gameSource/LivingLifePage.cpp
index ebc7c459..311ca14e 100644
--- a/gameSource/LivingLifePage.cpp
+++ b/gameSource/LivingLifePage.cpp
@@ -22,6 +22,8 @@
 
 #include "liveAnimationTriggers.h"
 
+#include "names.h"
+
 #include "../commonSource/fractalNoise.h"
 
 #include "minorGems/util/SimpleVector.h"
@@ -2191,6 +2193,8 @@ LivingLifePage::LivingLifePage()
     
     initLiveTriggers();
 
+    initNames();
+
     for( int i=0; i<4; i++ ) {
         char *name = autoSprintf( "ground_t%d.tga", i );    
         mGroundOverlaySprite[i] = loadSprite( name, false );
@@ -2542,6 +2546,8 @@ LivingLifePage::~LivingLifePage() {
     
     freeLiveTriggers();
 
+    freeNames();
+
     readyPendingReceivedMessages.deallocateStringElements();
 
     serverFrameMessages.deallocateStringElements();
@@ -21010,6 +21016,7 @@ void LivingLifePage::fadeErasedCharacters() {
     }
 
 
+char lastCompletionText[256] = {0};
 char originalCompletionText[256] = {0};
 unsigned int originalCompletionLength = 0;
 
@@ -21021,6 +21028,12 @@ const char* nameDetection(const char * const inString ) {
     if( textLength > 6 && strncmp( inString, "CURSE ", 6 ) == 0 ) {
         return inString + 6;
         }
+    else if( textLength > 5 && strncmp( inString, "I AM ", 5 ) == 0 ) {
+        return inString + 5;
+        }
+    else if( textLength > 8 && strncmp( inString, "YOU ARE ", 8 ) == 0 ) {
+        return inString + 8;
+        }
     else {
         nameText = strrchr( inString, ' ' );
         if( nameText == NULL ) {
@@ -21082,13 +21095,12 @@ void LivingLifePage::nameCompletion() {
 
     char *curText = mSayField.getText();
 
-    int curNameIndex = trailingNameMatch( curText );
+    unsigned int textLength = strlen(curText);
 
-    // no exact match, has not run yet capture partial name for matching
-    if( curNameIndex == -1 ) {
-        strncpy(originalCompletionText, curText, 255);
-        originalCompletionLength = strlen(originalCompletionText);
-        }
+    if( strncmp( curText, lastCompletionText, 255 ) != 0 ) {
+      strncpy(originalCompletionText, curText, 255);
+      originalCompletionLength = strlen(originalCompletionText);
+    }
 
     delete [] curText;
 
@@ -21101,16 +21113,27 @@ void LivingLifePage::nameCompletion() {
     // some text to try and find partial name in, try next name
 
     const char* nameText = nameDetection( originalCompletionText );
+    const char* name = NULL;
 
-    int newIndex = nameMatching( nameText, curNameIndex );
+    if( textLength >= 5 && strncmp( curText, "I AM ", 5 ) == 0 ) {
+        name = findCloseLastName((char*)nameText);
+        }
+    else if( textLength >= 8 && strncmp( curText, "YOU ARE ", 8 ) == 0 ) {
+        name = findCloseFirstName((char*)nameText);
+        }
+    else {
+        int curNameIndex = trailingNameMatch( curText );
+        int newIndex = nameMatching( nameText, curNameIndex );
 
-    if( newIndex < 0 || newIndex >= knownNames.size() ) return;
+        if( newIndex < 0 || newIndex >= knownNames.size() ) return;
+        name = knownNames.getElementDirect( newIndex );
+        }
+
+    if ( name == NULL ) return;
 
     fadeErasedCharacters();
 
     char say[256];
-    const char* name = knownNames.getElementDirect( newIndex );
-    if ( name == NULL ) return;
     unsigned int prefixLength = nameText - originalCompletionText;
     if ( prefixLength > 255 ) return;
     strncpy( say, originalCompletionText, prefixLength );
@@ -21121,6 +21144,7 @@ void LivingLifePage::nameCompletion() {
     if (maxLength < prefixLength) return;
     strncpy( say + prefixLength, name, maxLength-prefixLength );
     say[maxLength] = 0;
+    strncpy(lastCompletionText, say, 255);
     mSayField.setText( say );
     }
 
diff --git a/gameSource/makeFileList b/gameSource/makeFileList
index 3204616c..2dd17849 100644
--- a/gameSource/makeFileList
+++ b/gameSource/makeFileList
@@ -26,6 +26,7 @@ accountHmac.cpp \
 PageComponent.cpp \
 GamePage.cpp \
 LivingLifePage.cpp \
+names.cpp \
 pathFind.cpp \
 ageControl.cpp \
 ExtendedMessagePage.cpp \
diff --git a/gameSource/names.cpp b/gameSource/names.cpp
new file mode 100644
index 00000000..270437c9
--- /dev/null
+++ b/gameSource/names.cpp
@@ -0,0 +1,241 @@
+#include "names.h"
+#include "minorGems/util/SimpleVector.h"
+#include "minorGems/util/StringTree.h"
+#include "minorGems/util/stringUtils.h"
+#include "minorGems/util/log/AppLog.h"
+#include "minorGems/io/file/File.h"
+#include "minorGems/util/random/JenkinsRandomSource.h"
+#include "minorGems/game/game.h" // get time
+
+#include <stdio.h>
+
+
+static char *firstNames = NULL;
+static char *lastNames = NULL;
+
+// total length of arrays
+static int firstNamesLen;
+static int lastNamesLen;
+
+static JenkinsRandomSource nameSource( 340403 );
+
+
+
+
+
+
+static const char *defaultName = "";
+
+
+
+
+static char *readNameFile( const char *inFileName, int *outLen ) {
+    
+    File nameFile( NULL, inFileName );
+
+    char *contents = nameFile.readFileContents();
+
+    if( contents == NULL ) {
+        AppLog::errorF( "Failed to open name file %s for reading", inFileName );
+        return NULL;
+        }
+    char *temp = contents;
+    contents = stringToUpperCase( temp );
+    delete [] temp;
+    
+    int len = strlen( contents );
+
+    for( int i=0; i<len; i++ ) {
+        if( contents[i] == '\n' ) {
+            contents[i] = '\0';
+            }
+        }
+    *outLen = len;
+    
+    return contents;
+    }
+
+
+
+
+void initNames() {    
+    firstNames = readNameFile( "firstNames.txt", &firstNamesLen  );
+    lastNames = readNameFile( "lastNames.txt", &lastNamesLen );
+    unsigned int timeSeed = 
+        (unsigned int)fmod( game_getCurrentTime(), UINT_MAX );
+    nameSource.reseed(timeSeed);
+    }
+
+
+
+
+void freeNames() {
+    if( firstNames != NULL ) {
+        delete [] firstNames;
+        firstNames = NULL;
+        }
+    if( lastNames != NULL ) {
+        delete [] lastNames;
+        lastNames = NULL;
+        }
+    }
+
+
+
+
+int sharedPrefixLength( const char *inA, const char *inB ) {
+    
+    int i=0;
+    
+    while( inA[i] != '\0' && inB[i] != '\0' &&
+           inA[i] == inB[i] ) {
+        i++;
+        }
+    return i;
+    }
+
+
+
+
+// walk backward to find start of next name
+int getNameOffsetBack( char *inNameList, int inListLen, int inOffset ) {
+    while( inOffset > 0 && inNameList[ inOffset ] != '\0' ) {
+        inOffset --;
+        }
+    if( inOffset == 0 ) {
+        return 0;
+        }
+    else {
+        // walked forward off of \0
+        return inOffset + 1;
+        }
+    }
+
+
+
+int getNameOffsetForward( char *inNameList, int inListLen, int inOffset ) {
+    int limit = inListLen - 1;
+    while( inOffset < limit && inNameList[ inOffset ] != '\0' ) {
+        inOffset ++;
+        }
+    if( inOffset == limit ) {
+        return getNameOffsetBack( inNameList, inListLen, limit - 1 );
+        }
+    else {
+        // walked forward off of \0
+        return inOffset + 1;
+        }
+    }
+
+
+
+
+
+const char *findCloseName( char *inString, char *inNameList, int inListLen ) {
+    if( inNameList == NULL ) {
+        return defaultName;
+        }
+    
+    char *targetPrefix = stringToUpperCase( inString );
+    int targetLength = strlen(targetPrefix);
+    //printf("prefix: (%s)\n", targetPrefix);
+    
+    int limit = inListLen;
+
+    int lowerBound = 0;
+    int upperBound = limit-1;
+    int offset = nameSource.getRandomBoundedInt( lowerBound, upperBound );
+    //printf("%d:%d:%d\n", lowerBound, offset, upperBound);
+    offset = getNameOffsetForward( inNameList, inListLen, offset );
+    //printf("name at %d (%s)\n", offset, &(inNameList[offset]));
+    
+    int lastDiff = 1;
+
+
+    int hitStartCount = 0;
+    int hitEndCount = 0;
+
+    int crazy = 0;
+    
+
+    while( lastDiff != 0 && ++crazy < 200 ) {
+        char *testString = &( inNameList[ offset ] );
+        lastDiff = strncmp( targetPrefix, testString, targetLength );
+
+        if( lastDiff > 0 ) {
+            // further down
+            // advance past this name, we've seen it by now
+            lowerBound = getNameOffsetForward( inNameList, inListLen, offset );
+            if ( upperBound - lowerBound < 1) {
+                //printf("range collapsed\n");
+                break;
+                }
+
+            offset = nameSource.getRandomBoundedInt( lowerBound, upperBound );
+            //printf("%d:%d:%d\n", lowerBound, offset, upperBound);
+
+            if( offset >= limit ) {
+                // walked off end
+                offset = limit - 2;
+                offset = getNameOffsetBack( inNameList, inListLen, offset );
+                hitEndCount++;
+                if( hitEndCount > 1 ) {
+                    //printf("hit end\n");
+                    break;
+                    }
+                }
+            else {
+                offset = getNameOffsetBack( inNameList, inListLen, offset );
+                hitEndCount = 0;
+                }
+            }
+        else if( lastDiff < 0 ) {
+            // further up
+            if ( upperBound == offset - 2 ) {
+                //printf("reached bottom\n");
+                break;
+                }
+            upperBound = offset - 2;
+            if ( upperBound - lowerBound < 1) {
+                //printf("range collapsed\n");
+                break;
+                }
+
+            offset = nameSource.getRandomBoundedInt( lowerBound, upperBound );
+            //printf("%d:%d:%d\n", lowerBound, offset, upperBound);
+
+            if( offset < 0 ) {
+                // walked off start
+                offset = 0;
+                hitStartCount++;
+                if( hitStartCount > 1 ) {
+                    //printf("hit start\n");
+                    break;
+                    }
+                }
+            else {
+                hitStartCount = 0;
+                offset = getNameOffsetBack( inNameList, inListLen, offset );
+                }
+            }
+        //printf("name at %d (%s)\n", offset, &(inNameList[offset]));
+        }
+
+    
+    delete [] targetPrefix;
+    
+    return &( inNameList[offset] );
+    }
+
+
+
+// results destroyed internally when freeNames called
+const char *findCloseFirstName( char *inString ) {
+    return findCloseName( inString, firstNames, firstNamesLen );
+    }
+
+
+
+const char *findCloseLastName( char *inString ) {
+    return findCloseName( inString, lastNames, lastNamesLen );
+    }
diff --git a/gameSource/names.h b/gameSource/names.h
new file mode 100644
index 00000000..d3f95559
--- /dev/null
+++ b/gameSource/names.h
@@ -0,0 +1,12 @@
+
+
+void initNames();
+
+
+void freeNames();
+
+
+// results destroyed internally when freeNames called
+const char *findCloseFirstName( char *inString );
+
+const char *findCloseLastName( char *inString );
