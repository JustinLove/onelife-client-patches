name: Test Release

on:
  workflow_dispatch:
    inputs:

jobs:
  test:

    runs-on: ubuntu-latest

    outputs:
      gameClientVersion: ${{ steps.gameClient.outputs.version }}
      patchVersion: ${{ steps.patch.outputs.version }}
      modVersion: v${{ steps.mod.outputs.version }}
      commitish: ${{ steps.commitish.outputs.sha }}
      windowsFile: ${{ steps.windows.outputs.filename }}
      macosxFile: ${{ steps.macosx.outputs.filename }}
      releaseVersion: ${{ steps.currentrelease.outputs.name }}


    steps:
      - name: current release
        id: currentrelease
        uses: thebritican/fetch-latest-release@v1.0.3
        with:
          github_token: ${{ github.token }}
      - name: checkout onelife
        uses: actions/checkout@v2
        with:
          repository: jasonrohrer/OneLife
          path: OneLife
      - name: Get Game Client Version
        id: gameClient
        run: echo "version="`grep versionNumber OneLife/gameSource/game.cpp | head -1 | sed -e 's/[^0-9]*//g'` >> "$GITHUB_OUTPUT"
      - name: checkout patches
        uses: actions/checkout@v2
        with:
          fetch-depth: '0'
      - name: fetch tags
        run: git fetch origin "+refs/tags/*:refs/tags/*"
      - name: get patch version number
        id: patch
        run: echo "version="`git for-each-ref --sort=-authordate --sort=-creatordate --format '%(refname:short)' --count=1 refs/tags/v* | sed -e 's/v//'` >> "$GITHUB_OUTPUT"
      - name: Compose version
        id: mod
        run: echo "version=${{ steps.gameClient.outputs.version}}.${{ steps.patch.outputs.version }}" >> "$GITHUB_OUTPUT"
      - name: Target Commit
        id: commitish
        run: echo "sha="`git log -1 --pretty=format:%H v${{ steps.patch.outputs.version }}` >> "$GITHUB_OUTPUT"
      - name: report
        run: echo "${{ steps.mod.outputs.version }} ${{ steps.commitish.outputs.name }}"
      - name: Windows filename
        id: windows
        run: echo "filename=WonLife-test-${{ steps.mod.outputs.version}}.zip" >> "$GITHUB_OUTPUT"
      - name: MacOSX filename
        id: macosx
        run: echo "filename=WonLifeMacOSX-test-${{ steps.mod.outputs.version}}.zip" >> "$GITHUB_OUTPUT"

  release:
    needs: test
    if: needs.test.outputs.modVersion != needs.test.outputs.releaseVersion

    runs-on: ubuntu-latest

    steps:
      - name: windows download
        run: curl --fail https://${{ secrets.AWS_S3_BUCKET }}.s3.amazonaws.com/${{ needs.test.outputs.windowsFile }} -o ${{ needs.test.outputs.windowsFile }}
      - name: macosx download
        run: curl --fail https://${{ secrets.AWS_S3_BUCKET }}.s3.amazonaws.com/${{ needs.test.outputs.macosxFile }} -o ${{ needs.test.outputs.macosxFile }}
      - name: file report
        run: ls -R
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
        with:
          commitish: ${{ needs.test.outputs.commitish }}
          tag_name: ${{ needs.test.outputs.modVersion}}
          release_name: ${{ needs.test.outputs.modVersion}}
          draft: true
      - name: Upload Windows
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ${{ needs.test.outputs.windowsFile }}
          asset_name: ${{ needs.test.outputs.windowsFile }}
          asset_content_type: application/zip
      - name: Upload MacOSX
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ${{ needs.test.outputs.macosxFile }}
          asset_name: ${{ needs.test.outputs.macosxFile }}
          asset_content_type: application/zip
