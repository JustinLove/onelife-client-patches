diff --git a/gameSource/LivingLifePage.cpp b/gameSource/LivingLifePage.cpp
index 447f7a25..eb39298a 100644
--- a/gameSource/LivingLifePage.cpp
+++ b/gameSource/LivingLifePage.cpp
@@ -212,6 +212,9 @@ void initKeybinds() {
     }
 
 
+static char showHelpOverlay = false;
+static char showHelpOverlayKey = 'h';
+
 static int screenCenterPlayerOffsetX, screenCenterPlayerOffsetY;
 
 
@@ -2528,6 +2531,16 @@ LivingLifePage::LivingLifePage()
     interactionKeysEnabled = SettingsManager::getIntSetting( "interactionKeysEnabled", 1 );
 
     initKeybinds();
+
+    char *keyString = SettingsManager::getStringSetting( "showHelpOverlayKey" );
+
+    if( keyString != NULL ) {
+        if( strlen( keyString ) == 1 ) {
+            showHelpOverlayKey = keyString[0];
+            }
+        delete [] keyString;
+        }
+
     
     initLiveTriggers();
 
@@ -3182,6 +3195,154 @@ LiveObject *LivingLifePage::getLiveObject( int inID ) {
     }
 
 
+void drawHelpEmotionKeys( doublePair messagePos ) {
+    double lineSpacing = 30;
+    double indent = 60;
+    double columnWidth = 300;
+
+    char letters[2];
+    letters[1] = 0;
+
+    messagePos.x += columnWidth/2;
+    mainFont->drawString( "Emotes: Alt+ or Ctrl+", 
+                           messagePos, alignCenter );
+    messagePos.x -= columnWidth/2;
+    messagePos.y -= lineSpacing;
+
+    Emotion *e = getEmotion(0);
+    for( int index = 0; (e = getEmotion(index)) != NULL && e->triggerWord && index < 200; index++ ) {
+        if( e->triggerKey == 0) continue;
+        letters[0] = e->triggerKey;
+        mainFont->drawString( letters, 
+                               messagePos, alignLeft );
+        messagePos.x += indent;
+        mainFontReview->drawString( e->triggerWord, 
+                               messagePos, alignLeft );
+        messagePos.x -= indent;
+        messagePos.y -= lineSpacing;
+        }
+    }
+
+
+void drawHelpInteractionKeys( doublePair messagePos ) {
+    double lineSpacing = 30;
+    double indent = 60;
+    double columnWidth = 600;
+
+    char letters[2];
+    letters[1] = 0;
+
+    messagePos.x += columnWidth/2;
+    mainFont->drawString( "Actions at Cursor", 
+                           messagePos, alignCenter );
+    messagePos.x -= columnWidth/2;
+    messagePos.y -= lineSpacing;
+
+    for( int command = 0; command < IK_COUNT; command++ ) {
+        letters[0] = interactionKeys[command];
+        mainFont->drawString( letters, 
+                               messagePos, alignLeft );
+        messagePos.x += indent;
+        mainFontReview->drawString( interactionKeysHelp[command], 
+                               messagePos, alignLeft );
+        messagePos.x -= indent;
+        messagePos.y -= lineSpacing;
+        }
+    }
+
+
+void drawHelpMarkKeys( doublePair messagePos ) {
+    double lineSpacing = 30;
+    double indent = 60;
+
+    char letters[2];
+    letters[1] = 0;
+
+    letters[0] = playerMarkKey;
+    mainFont->drawString( letters, 
+                           messagePos, alignLeft );
+    messagePos.x += indent;
+    mainFontReview->drawString( "Mark Player", 
+                           messagePos, alignLeft );
+    messagePos.x -= indent;
+    messagePos.y -= lineSpacing;
+
+    letters[0] = playerUnmarkKey;
+    mainFont->drawString( letters, 
+                           messagePos, alignLeft );
+    messagePos.x += indent;
+    mainFontReview->drawString( "Unmark Player", 
+                           messagePos, alignLeft );
+    messagePos.x -= indent;
+    messagePos.y -= lineSpacing;
+    }
+
+
+void drawHelpSayKeys( doublePair messagePos ) {
+    double lineSpacing = 30;
+    double indent = 60;
+
+    mainFont->drawString( "F1", 
+                           messagePos, alignLeft );
+    messagePos.x += indent;
+    mainFontReview->drawString( "Close say without clearing", 
+                           messagePos, alignLeft );
+    messagePos.x -= indent;
+    messagePos.y -= lineSpacing;
+
+    mainFontReview->drawString( "Shift+Backspace  Clear and close say", 
+                           messagePos, alignLeft );
+    messagePos.y -= lineSpacing;
+    }
+
+
+
+void drawHelpOverlay() {
+    double lineSpacing = 30;
+    double indent = 60;
+
+    setDrawColor( 0, 0, 0, 0.5 );
+    drawRect( lastScreenViewCenter, 640, 360 );
+
+    setDrawColor( 1, 1, 1, 1 );
+
+    doublePair messagePos = lastScreenViewCenter;
+    messagePos.y += 300;
+
+    char letters[2];
+    letters[0] = showHelpOverlayKey;
+    letters[1] = 0;
+
+    messagePos.x -= indent;
+    mainFont->drawString( letters, 
+                           messagePos, alignLeft );
+    messagePos.x += indent;
+    mainFontReview->drawString( "Toggle Help", 
+                           messagePos, alignLeft );
+
+    messagePos.y -= lineSpacing*2;
+
+    // ------------------ interaction keys -----------------
+    messagePos.x -= 600;
+    drawHelpInteractionKeys( messagePos );
+
+    // ------------------ show relation keys -----------------
+    messagePos.y -= 420;
+    drawHelpMarkKeys( messagePos );
+    messagePos.y += 420;
+
+    // ------------------ emotion keys -----------------
+    messagePos.x += 900;
+    drawHelpEmotionKeys( messagePos );
+
+    // ------------------ say management keys-----------------
+    messagePos.x -= 400;
+    messagePos.y -= 475;
+    drawHelpSayKeys( messagePos );
+    messagePos.y += 475;
+
+    }
+
 
 
 SimpleVector<char*> *splitLines( const char *inString,
@@ -5358,6 +5519,13 @@ void LivingLifePage::draw( doublePair inViewCenter,
                       pos.y - 102 );
             }
         
+        doublePair helpPos = pos;
+        helpPos.y -= 100;
+        drawMessage( "h for keyboard help", helpPos );
+        if( showHelpOverlay ) {
+            drawHelpOverlay();
+            }
+    
         return;
         }
 
@@ -7853,6 +8021,10 @@ void LivingLifePage::draw( doublePair inViewCenter,
             drawFixedShadowString( translate( "fpsPending" ), pos );
             }
         }
+
+    if( showHelpOverlay ) {
+        drawHelpOverlay();
+        }
     
     if( showNet ) {
         doublePair pos = lastScreenViewCenter;
@@ -22798,6 +22970,11 @@ void LivingLifePage::keyDown( unsigned char inASCII ) {
             keyHandledByKeybind = true;
             }
 
+        if( inASCII == showHelpOverlayKey ) {
+            showHelpOverlay = !showHelpOverlay;
+            keyHandledByKeybind = true;
+            }
+
         // inspired by Awbz OneLife+
         if( ( ( openSayFieldOnTypingLower && islower( inASCII ) )
               || ( openSayFieldOnTypingUpper && isupper( inASCII ) )
diff --git a/gameSource/settings/showHelpOverlayKey.ini b/gameSource/settings/showHelpOverlayKey.ini
new file mode 100644
index 00000000..6e9f0da1
--- /dev/null
+++ b/gameSource/settings/showHelpOverlayKey.ini
@@ -0,0 +1 @@
+h
