diff --git a/gameSource/LivingLifePage.cpp b/gameSource/LivingLifePage.cpp
index 62fd4a10..5e45ab86 100644
--- a/gameSource/LivingLifePage.cpp
+++ b/gameSource/LivingLifePage.cpp
@@ -119,6 +119,8 @@ static int screenCenterPlayerOffsetX, screenCenterPlayerOffsetY;
 static float lastMouseX = 0;
 static float lastMouseY = 0;
 
+static doublePair lastScreenEdge = {0,0};
+static float screenEdgePushSpeed = 10;
 
 // set to true to render for teaser video
 static char teaserVideo = false;
@@ -2069,6 +2071,9 @@ LivingLifePage::LivingLifePage()
     mSayField.setIgnoreArrowKeys( true );
     // drawn under world at (0,1000), don't allow click to focus
     mSayField.setIgnoreMouse( true );
+
+    // set to 0 to disable screen edge push
+    screenEdgePushSpeed = SettingsManager::getFloatSetting( "screenEdgePushSpeed", 10 );
     
     initLiveTriggers();
 
@@ -15685,18 +15690,6 @@ void LivingLifePage::step() {
                 lrint( moveScale * 
                        cameraFollowsObject->currentMoveDirection.y );
  
-            if( screenCenterPlayerOffsetX < -viewWidth / 3 ) {
-                screenCenterPlayerOffsetX =  -viewWidth / 3;
-                }
-            if( screenCenterPlayerOffsetX >  viewWidth / 3 ) {
-                screenCenterPlayerOffsetX =  viewWidth / 3;
-                }
-            if( screenCenterPlayerOffsetY < -viewHeight / 5 ) {
-                screenCenterPlayerOffsetY =  -viewHeight / 5;
-                }
-            if( screenCenterPlayerOffsetY >  viewHeight / 6 ) {
-                screenCenterPlayerOffsetY =  viewHeight / 6;
-                }
             }
         else if( false ) { // skip for now
             // stopped moving
@@ -15737,6 +15730,22 @@ void LivingLifePage::step() {
             
             }
 
+        screenCenterPlayerOffsetX -= lastScreenEdge.x * screenEdgePushSpeed;
+        screenCenterPlayerOffsetY -= lastScreenEdge.y * screenEdgePushSpeed;
+
+        if( screenCenterPlayerOffsetX < -viewWidth / 3 ) {
+            screenCenterPlayerOffsetX =  -viewWidth / 3;
+            }
+        if( screenCenterPlayerOffsetX >  viewWidth / 3 ) {
+            screenCenterPlayerOffsetX =  viewWidth / 3;
+            }
+        if( screenCenterPlayerOffsetY < -viewHeight / 5 ) {
+            screenCenterPlayerOffsetY =  -viewHeight / 5;
+            }
+        if( screenCenterPlayerOffsetY >  viewHeight / 6 ) {
+            screenCenterPlayerOffsetY =  viewHeight / 6;
+            }
+
         if( ! vogMode ) {
             
             screenTargetPos.x = 
@@ -17783,6 +17792,20 @@ void LivingLifePage::pointerMove( float inX, float inY ) {
         mLastMouseOverFade = 1.0f;
         }
     
+    float spanX = viewWidth/2 - CELL_D/2;
+    float spanY = viewHeight/2 - CELL_D/2;
+    doublePair delta = {
+        inX - lastScreenViewCenter.x,
+        inY - lastScreenViewCenter.y
+        };
+    if (fabs(delta.x) > spanX || fabs(delta.y) > spanY) {
+        lastScreenEdge = normalize(delta);
+        }
+    else {
+        lastScreenEdge.x = 0;
+        lastScreenEdge.y = 0;
+        }
+
     }
 
 
