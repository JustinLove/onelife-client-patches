diff --git a/gameSource/LivingLifePage.cpp b/gameSource/LivingLifePage.cpp
index a044ac3e..b6a4811e 100644
--- a/gameSource/LivingLifePage.cpp
+++ b/gameSource/LivingLifePage.cpp
@@ -95,8 +95,16 @@ static JenkinsRandomSource remapRandSource( 340403 );
 static int lastScreenMouseX, lastScreenMouseY;
 static char mouseDown = false;
 static int mouseDownFrames = 0;
+static int mouseClickGap = 0;
+static char mouseHeld = false;
+static char autoRun = false;
+static char autoRunFirstClick = false;
+static float previousMouseX = 0;
+static float previousMouseY = 0;
 
 static int minMouseDownFrames = 30;
+static int maxDoubleClickFrames = 20;
+static int maxDoubleClickDrift = 30;
 
 
 static int screenCenterPlayerOffsetX, screenCenterPlayerOffsetY;
@@ -1509,7 +1517,7 @@ void LivingLifePage::computePathToDest( LiveObject *inObject ) {
             inObject->pathToDest[i].y -= pathOffsetY;
             }
 
-        inObject->shouldDrawPathMarks = false;
+        inObject->shouldDrawPathMarks = autoRun;
         
         // up, down, left, right
         int dirsInPath[4] = { 0, 0, 0, 0 };
@@ -8788,8 +8796,12 @@ void LivingLifePage::step() {
         }
     
 
+    mouseClickGap++;
     if( mouseDown ) {
         mouseDownFrames++;
+        if ( mouseDownFrames > minMouseDownFrames / frameRateFactor ) {
+            mouseHeld = true;
+            }
         }
     
     if( mServerSocket == -1 ) {
@@ -15312,7 +15324,7 @@ void LivingLifePage::step() {
                 }
             else {
 
-                if( o->id == ourID && mouseDown && shouldMoveCamera ) {
+                if( o->id == ourID && (mouseHeld || autoRun) && shouldMoveCamera ) {
                     float worldMouseX, worldMouseY;
                     
                     screenToWorld( lastScreenMouseX,
@@ -15331,9 +15343,7 @@ void LivingLifePage::step() {
                     // however, if they started by clicking on something
                     // make sure they are really holding the mouse down
                     // (give them time to unpress the mouse)
-                    if( nextActionMessageToSend == NULL ||
-                        mouseDownFrames >  
-                        minMouseDownFrames / frameRateFactor ) {
+                    if( nextActionMessageToSend == NULL ) {
                         
                         double absX = abs( delta.x );
                         double absY = abs( delta.y );
@@ -15345,10 +15355,7 @@ void LivingLifePage::step() {
                             
                             if( absX < CELL_D * 4 
                                 &&
-                                absY < CELL_D * 4 
-                                &&
-                                mouseDownFrames >  
-                                minMouseDownFrames / frameRateFactor ) {
+                                absY < CELL_D * 4 ) {
                                 
                                 // they're holding mouse down very close
                                 // to to their character
@@ -15521,6 +15528,9 @@ void LivingLifePage::step() {
                     //trailColor.g = randSource.getRandomBoundedDouble( 0, .5 );
                     //trailColor.b = randSource.getRandomBoundedDouble( 0, .5 );
                     
+                    if( o->id == ourID ) {
+                        autoRun = false;
+                        }
 
                     if( ( o->id != ourID && 
                           ! o->somePendingMessageIsMoreMovement ) 
@@ -16206,7 +16216,7 @@ void LivingLifePage::checkForPointerHit( PointerHitRecord *inRecord,
     p->closestCellX = clickDestX;
     p->closestCellY = clickDestY;
 
-    if( mForceGroundClick ) {
+    if( mForceGroundClick || autoRun ) {
         return;
         }
     
@@ -16999,7 +17009,25 @@ void LivingLifePage::pointerDown( float inX, float inY ) {
         mouseDownFrames = 0;
         }
     
+    LiveObject *ourLiveObject = getOurLiveObject();
+
     getLastMouseScreenPos( &lastScreenMouseX, &lastScreenMouseY );
+    autoRunFirstClick = false;
+    if ( !autoRun
+     && mouseClickGap < maxDoubleClickFrames
+     && ourLiveObject->inMotion
+     && !modClick
+     && abs(previousMouseX - lastScreenMouseX) < maxDoubleClickDrift
+     && abs(previousMouseY - lastScreenMouseY) < maxDoubleClickDrift ) {
+        autoRun = true;
+        autoRunFirstClick = true;
+        if (ourLiveObject != NULL) {
+            ourLiveObject->shouldDrawPathMarks = autoRun;
+            }
+      }
+    mouseClickGap = 0;
+    previousMouseX = lastScreenMouseX;
+    previousMouseY = lastScreenMouseY;
     
     if( mFirstServerMessagesReceived != 3 || ! mDoneLoadingFirstObjectSet ) {
         return;
@@ -17014,7 +17042,6 @@ void LivingLifePage::pointerDown( float inX, float inY ) {
         }
     
 
-    LiveObject *ourLiveObject = getOurLiveObject();
     
     if( ourLiveObject->holdingID > 0 &&
         getObject( ourLiveObject->holdingID )->speedMult == 0 ) {
@@ -17121,9 +17148,7 @@ void LivingLifePage::pointerDown( float inX, float inY ) {
     int mapY = clickDestY - mMapOffsetY + mMapD / 2;    
     
     
-    if( mouseAlreadyDown && 
-        mouseDownFrames >  
-        minMouseDownFrames / frameRateFactor ) {
+    if( mouseHeld || autoRun ) {
         
         // continuous movement mode
 
@@ -18321,11 +18346,15 @@ void LivingLifePage::pointerUp( float inX, float inY ) {
         return;
         }
 
-    if( mouseDown && 
-        getOurLiveObject()->inMotion 
-        &&
-        mouseDownFrames >  
-        minMouseDownFrames / frameRateFactor ) {
+    if( autoRun && !autoRunFirstClick &&
+        getOurLiveObject()->inMotion ) {
+
+        autoRun = false;
+        mouseHeld = false;
+        }
+
+    if( mouseHeld &&
+        getOurLiveObject()->inMotion ) {
         
         // treat the up as one final click (at closest next path position
         // to where they currently are)
@@ -18345,6 +18374,7 @@ void LivingLifePage::pointerUp( float inX, float inY ) {
         }
 
     mouseDown = false;
+    mouseHeld = false;
 
 
     // clear mouse over cell
