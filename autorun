diff --git a/gameSource/LivingLifePage.cpp b/gameSource/LivingLifePage.cpp
index 2ebcbd37..1ddd586f 100644
--- a/gameSource/LivingLifePage.cpp
+++ b/gameSource/LivingLifePage.cpp
@@ -97,8 +97,12 @@ static JenkinsRandomSource remapRandSource( 340403 );
 static int lastScreenMouseX, lastScreenMouseY;
 static char mouseDown = false;
 static int mouseDownFrames = 0;
+static int mouseClickGap = 0;
+static char mouseHeld = false;
+static char autoRun = false;
 
 static int minMouseDownFrames = 30;
+static int maxDoubleClickFrames = 12;
 
 
 static int screenCenterPlayerOffsetX, screenCenterPlayerOffsetY;
@@ -1499,7 +1503,7 @@ void LivingLifePage::computePathToDest( LiveObject *inObject ) {
             inObject->pathToDest[i].y -= pathOffsetY;
             }
 
-        inObject->shouldDrawPathMarks = false;
+        inObject->shouldDrawPathMarks = autoRun;
         
         // up, down, left, right
         int dirsInPath[4] = { 0, 0, 0, 0 };
@@ -8756,8 +8760,12 @@ void LivingLifePage::step() {
         }
     
 
+    mouseClickGap++;
     if( mouseDown ) {
         mouseDownFrames++;
+        if ( mouseDownFrames > minMouseDownFrames / frameRateFactor ) {
+            mouseHeld = true;
+            }
         }
     
     if( mServerSocket == -1 ) {
@@ -15172,7 +15180,7 @@ void LivingLifePage::step() {
                 }
             else {
 
-                if( o->id == ourID && mouseDown && shouldMoveCamera ) {
+                if( o->id == ourID && (mouseHeld || autoRun) && shouldMoveCamera ) {
                     float worldMouseX, worldMouseY;
                     
                     screenToWorld( lastScreenMouseX,
@@ -15191,9 +15199,7 @@ void LivingLifePage::step() {
                     // however, if they started by clicking on something
                     // make sure they are really holding the mouse down
                     // (give them time to unpress the mouse)
-                    if( nextActionMessageToSend == NULL ||
-                        mouseDownFrames >  
-                        minMouseDownFrames / frameRateFactor ) {
+                    if( nextActionMessageToSend == NULL ) {
                         
                         double absX = abs( delta.x );
                         double absY = abs( delta.y );
@@ -15205,10 +15211,7 @@ void LivingLifePage::step() {
                             
                             if( absX < CELL_D * 4 
                                 &&
-                                absY < CELL_D * 4 
-                                &&
-                                mouseDownFrames >  
-                                minMouseDownFrames / frameRateFactor ) {
+                                absY < CELL_D * 4 ) {
                                 
                                 // they're holding mouse down very close
                                 // to to their character
@@ -15468,6 +15471,9 @@ void LivingLifePage::step() {
                     //trailColor.g = randSource.getRandomBoundedDouble( 0, .5 );
                     //trailColor.b = randSource.getRandomBoundedDouble( 0, .5 );
                     
+                    if( o->id == ourID ) {
+                        autoRun = false;
+                        }
 
                     if( ( o->id != ourID && 
                           ! o->somePendingMessageIsMoreMovement ) 
@@ -16154,7 +16160,7 @@ void LivingLifePage::checkForPointerHit( PointerHitRecord *inRecord,
     p->closestCellX = clickDestX;
     p->closestCellY = clickDestY;
 
-    if( mForceGroundClick ) {
+    if( mForceGroundClick || autoRun ) {
         return;
         }
     
@@ -16935,6 +16941,15 @@ void LivingLifePage::pointerDown( float inX, float inY ) {
         }
     
     mLastMouseOverID = 0;
+
+    if (mouseClickGap < maxDoubleClickFrames) {
+      autoRun = true;
+      LiveObject* ourLiveObject = getOurLiveObject();
+      if (ourLiveObject != NULL) {
+          ourLiveObject->shouldDrawPathMarks = autoRun;
+          }
+    }
+    mouseClickGap = 0;
     
     // detect cases where mouse is held down already
     // this is for long-distance player motion, and we don't want
@@ -17060,10 +17075,7 @@ void LivingLifePage::pointerDown( float inX, float inY ) {
     int mapX = clickDestX - mMapOffsetX + mMapD / 2;
     int mapY = clickDestY - mMapOffsetY + mMapD / 2;    
     
-    
-    if( mouseAlreadyDown && 
-        mouseDownFrames >  
-        minMouseDownFrames / frameRateFactor ) {
+    if( mouseHeld || autoRun ) {
         
         // continuous movement mode
 
@@ -18269,18 +18281,18 @@ void LivingLifePage::pointerUp( float inX, float inY ) {
     wasAutoClick = false;
 
 
-    if( mouseDown && 
-        ourLiveObject->inMotion 
-        &&
-        mouseDownFrames >  
-        minMouseDownFrames / frameRateFactor ) {
-        
+    if( mouseHeld && 
+        ourLiveObject->inMotion ) {
+
         // treat the up as one final click
         // don't do this for now, because it's confusing
         // pointerDown( inX, inY );
+        // reuse of pointerDown in auto run makes it look like button is held
+        autoRun = false;
         }
 
     mouseDown = false;
+    mouseHeld = false;
 
 
     // clear mouse over cell
