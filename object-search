diff --git a/gameSource/LivingLifePage.cpp b/gameSource/LivingLifePage.cpp
index 55db0299c..a26d3a4c8 100644
--- a/gameSource/LivingLifePage.cpp
+++ b/gameSource/LivingLifePage.cpp
@@ -163,6 +163,8 @@ static int showLearnedTools = 1;
 
 static int filterMatchesProduct = 1;
 
+static int defaultSearchForCraving = 1;
+
 
 typedef enum interactionKeyType {
     IK_MOVE,
@@ -494,6 +496,7 @@ static FloatColor white = { 1, 1, 1, 1 };
 static FloatColor gold = { 255.0/255, 227.0/255, 50.0/255, 1 };
 static FloatColor blood = { 244.0/255, 16.0/255, 8.0/255, 1 };
 static FloatColor indigo = { 122.0/255, 126.0/255, 244.0/255, 1 };
+static FloatColor hintBlue = { 20.0/255, 94.0/255, 196.0/255, 1 };
 static FloatColor pink = { 250.0/255, 144.0/255, 146.0/255, 1 };
 static FloatColor stone = { 128.0/255, 125.0/255, 149.0/255, 1 };
 static FloatColor sepia = { 203.0/255, 165.0/255, 114.0/255, 1 };
@@ -765,6 +768,7 @@ void LivingLifePage::addLocationSlip( int inX, int inY ) {
     p.temporary = false;
     p.labeled = true;
     p.tempPerson = false;
+    p.search = false;
     p.temporaryExpireETA = 0;
     p.creationTime = game_getCurrentTime();
     p.pointerBounce = 0;
@@ -842,6 +846,7 @@ void LivingLifePage::addTempLocationSlip( int inX, int inY,
     p.ancient = false;
     p.temporary = true;
     p.labeled = false;
+    p.search = false;
     // no expiration for now
     // until we drop the map
     p.temporaryExpireETA = 0;
@@ -899,6 +904,48 @@ void LivingLifePage::addTempLocationSlip( int inX, int inY,
 
 
 
+void LivingLifePage::addSearchLocationSlip( int inX, int inY ) {
+    for( int i=0; i<mLocationSlips.size(); i++ ) {
+        LocationSlip *p = mLocationSlips.getElement( i );
+
+        if( p->search ) {
+            updateLocationSlip( p, inX, inY );
+            p->temporaryExpireETA = game_getCurrentTime() + 60;
+            return;
+            }
+        }
+
+    GridPos newPos = { inX, inY };
+    LocationSlip p;
+    p.pos = newPos;
+    p.ancient = false;
+    p.temporary = true;
+    p.labeled = false;
+    p.tempPerson = false;
+    p.search = true;
+    p.temporaryExpireETA = game_getCurrentTime() + 60;
+    doublePair offset = {LOCATION_SLIP_MAP_X, LOCATION_SLIP_BOTTOM_Y};
+    p.posOffset = p.targetOffset = p.hideOffset = offset;
+    p.creationTime = game_getCurrentTime();
+    p.slipColor = hintBlue;
+    p.personID = -1;
+    p.tempPersonKey = NULL;
+    mLocationSlips.push_front( p );
+    }
+
+
+void LivingLifePage::removeSearchLocationSlip() {
+    for( int i=0; i<mLocationSlips.size(); i++ ) {
+        LocationSlip *p = mLocationSlips.getElement( i );
+
+        if( p->search ) {
+            p->temporaryExpireETA = game_getCurrentTime();
+            return;
+            }
+        }
+  }
+
+
 static void updatePersonHomeLocation( int inPersonID, int inX, int inY ) {
     for( int i=0; i<homePosStack.size(); i++ ) {
         HomePos *p = homePosStack.getElement( i );
@@ -978,6 +1025,7 @@ void LivingLifePage::addAncientLocationSlip( int inX, int inY, int monumentID )
     p.temporary = false;
     p.labeled = false;
     p.tempPerson = false;
+    p.search = false;
     doublePair offset = {LOCATION_SLIP_RIGHT_X, LOCATION_SLIP_RIGHT_Y};
     p.posOffset = p.targetOffset = p.hideOffset = offset;
     p.pointerBounce = 0;
@@ -1007,6 +1055,7 @@ void LivingLifePage::addHomelandLocationSlip( int inX, int inY, const char* inFa
     p.tempPerson = false;
     p.pointerBounce = 0;
     p.pointerFade = 0;
+    p.search = false;
     doublePair offset = {LOCATION_SLIP_RIGHT_X, LOCATION_SLIP_RIGHT_Y};
     p.posOffset = p.targetOffset = p.hideOffset = offset;
     if( inFamilyName ) {
@@ -3224,6 +3273,57 @@ void LivingLifePage::clearMap() {
 
 
 
+void LivingLifePage::findInMap() {
+    doublePair nearestPos;
+    double dist = mMapD*mMapD;
+    char found = false;
+    doublePair center = mult(lastScreenViewCenter, 1.0/CELL_D);
+    if( mSoughtObjects.size() < 1 ) return;
+    for( int i=0; i<mMapD *mMapD; i++ ) {
+        // -1 represents unknown
+        // 0 represents known empty
+        int oID = mMap[i];
+        if( oID < 1 ) continue;
+        oID = getObjectParent( oID );
+        int index = mSoughtObjects.getElementIndex( oID );
+        if( index < 0 ) {
+            int numCont = mMapContainedStacks[i].size();
+
+            for( int j=0; j<numCont && index <= 0; j++ ) {
+                oID = mMapContainedStacks[i].getElementDirect( j );
+                index = mSoughtObjects.getElementIndex( oID );
+
+                SimpleVector<int> *subVec =
+                    mMapSubContainedStacks[i].getElement( j );
+
+                int numSub = subVec->size();
+                for( int s=0; s<numSub && index <= 0; s++ ) {
+                    oID = subVec->getElementDirect( s );
+                    index = mSoughtObjects.getElementIndex( oID );
+                    }
+                }
+            }
+        if( index >= 0 ) {
+            int wx = i % mMapD + mMapOffsetX - mMapD / 2;
+            int wy = i / mMapD + mMapOffsetY - mMapD / 2;
+            doublePair pos = {(double)wx, (double)wy};
+            double d = distance( pos, center );
+            //printf( "sought %d: %d %d,%d (%f)\n", oID, i, wx, wy, d );
+            if( d < dist ) {
+                found = true;
+                nearestPos = pos;
+                dist = d;
+                //printf( "nearest %d: %d %d,%d (%f)\n", oID, i, wx, wy, d );
+                }
+            }
+        }
+    if( found ) {
+        addSearchLocationSlip( lrint( nearestPos.x ), lrint( nearestPos.y ) );
+        }
+    }
+
+
+
 LivingLifePage::LivingLifePage() 
         : mServerSocket( -1 ), 
           mForceRunTutorial( false ),
@@ -3251,7 +3351,7 @@ LivingLifePage::LivingLifePage()
           mChalkBlotSprite( loadWhiteSprite( "chalkBlot.tga" ) ),
           mPathMarkSprite( loadWhiteSprite( "pathMark.tga" ) ),
           mSayField( handwritingFont, 0, 1000, 10, true, NULL,
-                     "ABCDEFGHIJKLMNOPQRSTUVWXYZ.-,'?!/ " ),
+                     "ABCDEFGHIJKLMNOPQRSTUVWXYZ.-,'?!/: " ),
           mDeathReason( NULL ),
           mShowHighlights( true ),
           mUsingSteam( false ),
@@ -3376,6 +3476,8 @@ LivingLifePage::LivingLifePage()
 
     filterMatchesProduct = SettingsManager::getIntSetting( "filterMatchesProduct", 1 );
 
+    defaultSearchForCraving = SettingsManager::getIntSetting( "defaultSearchForCraving", 1 );
+
     interactionKeysEnabled = SettingsManager::getIntSetting( "interactionKeysEnabled", 1 );
 
     initKeybinds();
@@ -3574,6 +3676,7 @@ LivingLifePage::LivingLifePage()
     mPendingFilterString = NULL;
     
     
+    mObjectSearchString = NULL;
 
     for( int i=0; i<NUM_HINT_SHEETS; i++ ) {
         
@@ -3983,6 +4086,11 @@ LivingLifePage::~LivingLifePage() {
         mPendingFilterString = NULL;
         }
 
+    if( mObjectSearchString != NULL ) {
+        delete [] mObjectSearchString;
+        mObjectSearchString = NULL;
+        }
+
     if( mDeathReason != NULL ) {
         delete [] mDeathReason;
         }
@@ -13892,6 +14000,9 @@ void LivingLifePage::displayGlobalMessage( char *inMessage ) {
 
 
 void LivingLifePage::setNewCraving( int inFoodID, int inYumBonus ) {
+    mLastCravingFoodID = inFoodID;
+    mLastCravingYumBonus = inYumBonus;
+
     char *foodDescription = 
         stringToUpperCase( getObject( inFoodID )->description );
                 
@@ -13931,10 +14042,64 @@ void LivingLifePage::setNewCraving( int inFoodID, int inYumBonus ) {
         (char*)( mCravingMessage[ mLiveCravingSheetIndex ] ) );
     
     mCravingExtraOffset[ mLiveCravingSheetIndex ].x = longestLine;
+    if( mObjectSearchString == NULL && defaultSearchForCraving ) {
+        mSoughtObjects.push_back( inFoodID );
+        findInMap();
+        }
     }
 
 
 
+void LivingLifePage::setSearchSheet() {
+    if( mLiveCravingSheetIndex > -1 ) {
+        // hide old craving sheet
+        mCravingTargetOffset[ mLiveCravingSheetIndex ] =
+            mCravingHideOffset[ mLiveCravingSheetIndex ];
+        }
+    mLiveCravingSheetIndex ++;
+
+    if( mLiveCravingSheetIndex >= NUM_HINT_SHEETS ) {
+        mLiveCravingSheetIndex -= NUM_HINT_SHEETS;
+        }
+
+    if( mCravingMessage[ mLiveCravingSheetIndex ] != NULL ) {
+        delete [] mCravingMessage[ mLiveCravingSheetIndex ];
+        mCravingMessage[ mLiveCravingSheetIndex ] = NULL;
+        }
+
+    if( mObjectSearchString == NULL ) {
+        if( mLastCravingFoodID > 0 ) {
+            setNewCraving( mLastCravingFoodID, mLastCravingYumBonus );
+            }
+        return;
+        }
+
+    const char *reasonString = "";
+
+    if( mSoughtObjects.size() < 1 ) {
+        reasonString = translate( "noMatch" );
+        }
+
+    char *message =
+        autoSprintf( "SEARCHING: %s %s",
+                     mObjectSearchString, reasonString );
+
+    mCravingMessage[ mLiveCravingSheetIndex ] = message;
+
+    mCravingTargetOffset[ mLiveCravingSheetIndex ] =
+        mCravingHideOffset[ mLiveCravingSheetIndex ];
+
+    mCravingTargetOffset[ mLiveCravingSheetIndex ].y += 64;
+
+    double longestLine = getLongestLine( 
+        (char*)( mCravingMessage[ mLiveCravingSheetIndex ] ) );
+
+    mCravingExtraOffset[ mLiveCravingSheetIndex ].x = longestLine;
+    }
+
+
+
+
 // color list from here:
 // https://sashat.me/2017/01/11/list-of-20-simple-distinct-colors/
 
@@ -17013,6 +17178,8 @@ void LivingLifePage::step() {
                 
                 tokens->deallocateStringElements();
                 delete tokens;
+
+                findInMap();
                 
                 if( !( mFirstServerMessagesReceived & 1 ) ) {
                     // first map chunk just recieved
@@ -17620,6 +17787,18 @@ void LivingLifePage::step() {
                             }
                         
 
+                        // Clear object search slips for this location
+                        if( old != 0 ) {
+                            for( int i=0; i<mLocationSlips.size(); i++ ) {
+                                LocationSlip *p = mLocationSlips.getElement( i );
+
+                                if( p->search && p->pos.x == x && p->pos.y == y ) {
+                                    p->temporaryExpireETA = game_getCurrentTime();
+                                    break;
+                                    }
+                                }
+                            }
+
                         // Check if a home marker has been set or removed
                         if( responsiblePlayerID != -1 &&
                             ( old != 0 ||
@@ -18004,6 +18183,7 @@ void LivingLifePage::step() {
                 }
             
             delete [] lines;
+            findInMap();
             }
         else if( type == PLAYER_UPDATE ) {
             
@@ -18337,6 +18517,8 @@ void LivingLifePage::step() {
                         existing->id == ourID ) {
                         // got a PU for self
 
+                        findInMap();
+
                         if( existing->holdingID != o.holdingID ) {
                             // holding change
                             // if we have a temp home arrow
@@ -22430,7 +22612,7 @@ void LivingLifePage::step() {
         
         char *currentText = mSayField.getText();
         
-        if( strlen( currentText ) > 0 && currentText[0] == '/' ) {
+        if( strlen( currentText ) > 0 && ( currentText[0] == '/' || currentText[0] == ':' ) ) {
             // typing a filter
             // hard cap at 25, regardless of age
             // don't want them typing long filters that overflow the display
@@ -24008,6 +24190,7 @@ void LivingLifePage::makeActive( char inFresh ) {
         }
 
     mOldHintArrows.deleteAll();
+    mSoughtObjects.deleteAll();
 
     mGlobalMessageShowing = false;
     mGlobalMessageStartTime = 0;
@@ -24076,7 +24259,7 @@ void LivingLifePage::makeActive( char inFresh ) {
     mCurrentHintObjectID = 0;
     mCurrentHintIndex = 0;
     
-    mNextHintObjectID = 0;
+    mNextHintObjectID = 1; // object search doesn't work when this is 0
     mNextHintIndex = 0;
     
     
@@ -24125,6 +24308,9 @@ void LivingLifePage::makeActive( char inFresh ) {
             mCravingMessage[i] = NULL;
             }
         }
+
+    mLastCravingFoodID = -1;
+    mLastCravingYumBonus = 0;
     
     
     for( int i=0; i<NUM_TOOL_SHEETS; i++ ) {
@@ -28094,6 +28280,17 @@ void LivingLifePage::keyDown( unsigned char inASCII ) {
                 mSayField.focus();
                 }
             break;
+        case ':':
+            if( ! mSayField.isFocused() ) {
+                mEKeyDown = false;
+                mZKeyDown = false;
+                mXKeyDown = false;
+
+                // start typing a filter
+                mSayField.setText( ":" );
+                mSayField.focus();
+                }
+            break;
         case 13:  // enter
             // speak
             if( ! TextField::isAnyFocused() ) {
@@ -28412,6 +28609,55 @@ void LivingLifePage::keyDown( unsigned char inASCII ) {
                                 }
                             }
                         }
+                    else if( strlen( typedText ) > 0 &&
+                             typedText[0] == ':' ) {
+                        // object search
+                        const char *searchCommand = ":";
+                        char *filterString = 
+                            &( typedText[ strlen( searchCommand ) ] );
+
+                        if( mObjectSearchString != NULL ) {
+                            delete [] mObjectSearchString;
+                            mObjectSearchString = NULL;
+                            }
+
+                        char *trimmedFilterString = 
+                            trimWhitespace( filterString );
+
+                        int filterStringLen = 
+                            strlen( trimmedFilterString );
+
+                        if( filterStringLen > 0 ) {
+                            // not blank
+                            mObjectSearchString =
+                                stringDuplicate( trimmedFilterString );
+                            }
+
+                        delete [] trimmedFilterString;
+
+                        mSoughtObjects.deleteAll();
+                        removeSearchLocationSlip();
+                        if( mObjectSearchString != NULL ) {
+                            int remaining;
+                            int hits;
+                            ObjectRecord** hitObjects = searchObjects(
+                                mObjectSearchString,
+                                0, // don't filter out what we're holding
+                                200,
+                                &hits, &remaining );
+
+                            if( hits > 0 ) {
+                                for( int i=0; i<hits; i++ ) {
+                                    int oID = hitObjects[i]->id;
+                                    mSoughtObjects.push_back( oID );
+                                    //printf("hit %d\n", oID);
+                                    }
+                                delete [] hitObjects;
+                                findInMap();
+                                }
+                            }
+                        setSearchSheet( );
+                        }
                     else {
                         // actual, spoken text, not a /command
                         
diff --git a/gameSource/LivingLifePage.h b/gameSource/LivingLifePage.h
index bb142e311..e6226287c 100644
--- a/gameSource/LivingLifePage.h
+++ b/gameSource/LivingLifePage.h
@@ -489,6 +489,7 @@ typedef struct LocationSlip {
         char temporary;
         char labeled;
         char tempPerson;
+        char search;
         int personID;
         const char *tempPersonKey;
         // 0 if not set
@@ -549,6 +550,7 @@ class LivingLifePage : public GamePage, public ActionListener {
         ~LivingLifePage();
         
         void clearMap();
+        void findInMap();
         
         // enabled tutorail next time a connection loads
         void runTutorial();
@@ -841,6 +843,9 @@ class LivingLifePage : public GamePage, public ActionListener {
         SimpleVector<OldHintArrow> mOldHintArrows;
 
 
+        SimpleVector<int> mSoughtObjects;
+
+
         SimpleVector<TransRecord *> mLastHintSortedList;
         int mLastHintSortedSourceID;
         char *mLastHintFilterString;
@@ -863,6 +868,7 @@ class LivingLifePage : public GamePage, public ActionListener {
         char *mHintFilterString;
         char mHintFilterStringNoMatch;
 
+        char *mObjectSearchString;
         
         // offset from current view center
         doublePair mTutorialHideOffset[NUM_HINT_SHEETS];
@@ -900,9 +906,14 @@ class LivingLifePage : public GamePage, public ActionListener {
         char *mCravingMessage[NUM_HINT_SHEETS];
 
         int mLiveCravingSheetIndex;
+
+        int mLastCravingFoodID;
+        int mLastCravingYumBonus;
         
         void setNewCraving( int inFoodID, int inYumBonus );
 
+        void setSearchSheet();
+
         
 
 
@@ -1157,6 +1168,8 @@ class LivingLifePage : public GamePage, public ActionListener {
         void setLocationSlipExpiration( int seconds );
         void addLocationSlip( int inX, int inY );
         void addTempLocationSlip( int inX, int inY, char inPerson, int inPersonID, const char* inPersonKey, int inAge );
+        void addSearchLocationSlip( int inX, int inY );
+        void removeSearchLocationSlip();
         void updateLocationSlip( LocationSlip* locationSlip, int inX, int inY );
         void updatePersonLocationSlip( int inPersonID, int inX, int inY );
         void addAncientLocationSlip( int inX, int inY, int monumentID );
diff --git a/gameSource/settings/defaultSearchForCraving.ini b/gameSource/settings/defaultSearchForCraving.ini
new file mode 100644
index 000000000..56a6051ca
--- /dev/null
+++ b/gameSource/settings/defaultSearchForCraving.ini
@@ -0,0 +1 @@
+1
\ No newline at end of file
