diff --git a/gameSource/LivingLifePage.cpp b/gameSource/LivingLifePage.cpp
index edbe514ac..e439013ef 100644
--- a/gameSource/LivingLifePage.cpp
+++ b/gameSource/LivingLifePage.cpp
@@ -166,6 +166,10 @@ static int showLearnedTools = 0;
 
 static int filterMatchesProduct = 1;
 
+static int defaultSearchForCraving = 1;
+static char searchOpenkey = ';';
+static char searchClearKey = '`';
+
 
 typedef enum interactionKeyType {
     IK_MOVE,
@@ -497,6 +501,7 @@ static FloatColor white = { 1, 1, 1, 1 };
 static FloatColor gold = { 255.0/255, 227.0/255, 50.0/255, 1 };
 static FloatColor blood = { 244.0/255, 16.0/255, 8.0/255, 1 };
 static FloatColor indigo = { 122.0/255, 126.0/255, 244.0/255, 1 };
+static FloatColor hintBlue = { 20.0/255, 94.0/255, 196.0/255, 1 };
 static FloatColor pink = { 250.0/255, 144.0/255, 146.0/255, 1 };
 static FloatColor stone = { 128.0/255, 125.0/255, 149.0/255, 1 };
 static FloatColor wood = { 146.0/255, 65.0/255, 0.0/255, 1 };
@@ -791,6 +796,7 @@ void LivingLifePage::addLocationSlip( int inX, int inY ) {
     p.labeled = true;
     p.showDistance = false;
     p.tempPerson = false;
+    p.search = false;
     p.temporaryExpireETA = 0;
     p.distanceExpireETA = 0;
     p.creationTime = game_getCurrentTime();
@@ -870,6 +876,7 @@ void LivingLifePage::addTempLocationSlip( int inX, int inY,
     p.temporary = true;
     p.labeled = false;
     p.showDistance = false;
+    p.search = false;
     // no expiration for now
     // until we drop the map
     p.temporaryExpireETA = 0;
@@ -929,6 +936,50 @@ void LivingLifePage::addTempLocationSlip( int inX, int inY,
 
 
 
+void LivingLifePage::addSearchLocationSlip( int inX, int inY ) {
+    for( int i=0; i<mLocationSlips.size(); i++ ) {
+        LocationSlip *p = mLocationSlips.getElement( i );
+
+        if( p->search ) {
+            updateLocationSlip( p, inX, inY );
+            p->temporaryExpireETA = game_getCurrentTime() + 60;
+            return;
+            }
+        }
+
+    GridPos newPos = { inX, inY };
+    LocationSlip p;
+    p.pos = newPos;
+    p.ancient = false;
+    p.temporary = true;
+    p.labeled = false;
+    p.showDistance = false;
+    p.search = true;
+    p.tempPerson = false;
+    p.temporaryExpireETA = game_getCurrentTime() + 60;
+    p.distanceExpireETA = game_getCurrentTime();
+    doublePair offset = {LOCATION_SLIP_MAP_X, LOCATION_SLIP_BOTTOM_Y};
+    p.posOffset = p.targetOffset = p.hideOffset = offset;
+    p.creationTime = game_getCurrentTime();
+    p.slipColor = hintBlue;
+    p.personID = -1;
+    p.tempPersonKey = NULL;
+    mLocationSlips.push_front( p );
+    }
+
+
+void LivingLifePage::removeSearchLocationSlip() {
+    for( int i=0; i<mLocationSlips.size(); i++ ) {
+        LocationSlip *p = mLocationSlips.getElement( i );
+
+        if( p->search ) {
+            p->temporaryExpireETA = game_getCurrentTime();
+            return;
+            }
+        }
+  }
+
+
 static void updatePersonHomeLocation( int inPersonID, int inX, int inY ) {
     for( int i=0; i<homePosStack.size(); i++ ) {
         HomePos *p = homePosStack.getElement( i );
@@ -1008,6 +1059,7 @@ void LivingLifePage::addPropertyLocationSlip( int inX, int inY ) {
     p.labeled = false;
     p.showDistance = false;
     p.tempPerson = false;
+    p.search = false;
     doublePair offset = {LOCATION_SLIP_RIGHT_X, LOCATION_SLIP_RIGHT_Y};
     p.posOffset = p.targetOffset = p.hideOffset = offset;
     p.pointerBounce = 0;
@@ -1028,6 +1080,7 @@ void LivingLifePage::addAncientLocationSlip( int inX, int inY, int monumentID )
     p.labeled = false;
     p.showDistance = false;
     p.tempPerson = false;
+    p.search = false;
     doublePair offset = {LOCATION_SLIP_RIGHT_X, LOCATION_SLIP_RIGHT_Y};
     p.posOffset = p.targetOffset = p.hideOffset = offset;
     p.pointerBounce = 0;
@@ -1059,6 +1112,7 @@ void LivingLifePage::addHomelandLocationSlip( int inX, int inY, const char* inFa
     p.tempPerson = false;
     p.pointerBounce = 0;
     p.pointerFade = 0;
+    p.search = false;
     doublePair offset = {LOCATION_SLIP_RIGHT_X, LOCATION_SLIP_RIGHT_Y};
     p.posOffset = p.targetOffset = p.hideOffset = offset;
     p.distanceExpireETA = game_getCurrentTime() + LOCATION_SLIP_SHOW_DISTANCE;
@@ -3278,6 +3332,57 @@ void LivingLifePage::clearMap() {
 
 
 
+void LivingLifePage::findInMap() {
+    doublePair nearestPos;
+    double dist = mMapD*mMapD;
+    char found = false;
+    doublePair center = mult(lastScreenViewCenter, 1.0/CELL_D);
+    if( mSoughtObjects.size() < 1 ) return;
+    for( int i=0; i<mMapD *mMapD; i++ ) {
+        // -1 represents unknown
+        // 0 represents known empty
+        int oID = mMap[i];
+        if( oID < 1 ) continue;
+        oID = getObjectParent( oID );
+        int index = mSoughtObjects.getElementIndex( oID );
+        if( index < 0 ) {
+            int numCont = mMapContainedStacks[i].size();
+
+            for( int j=0; j<numCont && index < 0; j++ ) {
+                oID = mMapContainedStacks[i].getElementDirect( j );
+                index = mSoughtObjects.getElementIndex( oID );
+
+                SimpleVector<int> *subVec =
+                    mMapSubContainedStacks[i].getElement( j );
+
+                int numSub = subVec->size();
+                for( int s=0; s<numSub && index < 0; s++ ) {
+                    oID = subVec->getElementDirect( s );
+                    index = mSoughtObjects.getElementIndex( oID );
+                    }
+                }
+            }
+        if( index >= 0 ) {
+            int wx = i % mMapD + mMapOffsetX - mMapD / 2;
+            int wy = i / mMapD + mMapOffsetY - mMapD / 2;
+            doublePair pos = {(double)wx, (double)wy};
+            double d = distance( pos, center );
+            //printf( "sought %d: %d %d,%d (%f)\n", oID, i, wx, wy, d );
+            if( d < dist ) {
+                found = true;
+                nearestPos = pos;
+                dist = d;
+                //printf( "nearest %d: %d %d,%d (%f)\n", oID, i, wx, wy, d );
+                }
+            }
+        }
+    if( found ) {
+        addSearchLocationSlip( lrint( nearestPos.x ), lrint( nearestPos.y ) );
+        }
+    }
+
+
+
 LivingLifePage::LivingLifePage() 
         : mServerSocket( -1 ), 
           mForceRunTutorial( 0 ),
@@ -3305,7 +3410,7 @@ LivingLifePage::LivingLifePage()
           mChalkBlotSprite( loadWhiteSprite( "chalkBlot.tga" ) ),
           mPathMarkSprite( loadWhiteSprite( "pathMark.tga" ) ),
           mSayField( handwritingFont, 0, 1000, 10, true, NULL,
-                     "ABCDEFGHIJKLMNOPQRSTUVWXYZ.-,'?!/ " ),
+                     "ABCDEFGHIJKLMNOPQRSTUVWXYZ.-,'?!/: " ),
           mDeathReason( NULL ),
           mShowHighlights( true ),
           mUsingSteam( false ),
@@ -3434,6 +3539,27 @@ LivingLifePage::LivingLifePage()
 
     filterMatchesProduct = SettingsManager::getIntSetting( "filterMatchesProduct", 1 );
 
+    defaultSearchForCraving = SettingsManager::getIntSetting( "defaultSearchForCraving", 1 );
+
+    char *searchKeyString = SettingsManager::getStringSetting( "searchOpenkey", ";" );
+
+    if( searchKeyString != NULL ) {
+        if( strlen( searchKeyString ) == 1 ) {
+            searchOpenkey = searchKeyString[0];
+            }
+        delete [] searchKeyString;
+        }
+
+    searchKeyString = SettingsManager::getStringSetting( "searchClearKey", "`" );
+
+    if( searchKeyString != NULL ) {
+        if( strlen( searchKeyString ) == 1 ) {
+            searchClearKey = searchKeyString[0];
+            }
+        delete [] searchKeyString;
+        }
+
+
     interactionKeysEnabled = SettingsManager::getIntSetting( "interactionKeysEnabled", 1 );
 
     initKeybinds();
@@ -3636,6 +3762,7 @@ LivingLifePage::LivingLifePage()
     mPendingFilterString = NULL;
     
     
+    mObjectSearchString = NULL;
 
     for( int i=0; i<NUM_HINT_SHEETS; i++ ) {
         
@@ -4045,6 +4172,11 @@ LivingLifePage::~LivingLifePage() {
         mPendingFilterString = NULL;
         }
 
+    if( mObjectSearchString != NULL ) {
+        delete [] mObjectSearchString;
+        mObjectSearchString = NULL;
+        }
+
     if( mDeathReason != NULL ) {
         delete [] mDeathReason;
         }
@@ -14039,6 +14171,11 @@ void LivingLifePage::displayGlobalMessage( char *inMessage ) {
 
 
 void LivingLifePage::setNewCraving( int inFoodID, int inYumBonus ) {
+    mLastCravingFoodID = inFoodID;
+    mLastCravingYumBonus = inYumBonus;
+
+    if( mObjectSearchString != NULL ) return;
+
     char *foodDescription = 
         stringToUpperCase( getObject( inFoodID )->description );
                 
@@ -14077,11 +14214,67 @@ void LivingLifePage::setNewCraving( int inFoodID, int inYumBonus ) {
     double longestLine = getLongestLine( 
         (char*)( mCravingMessage[ mLiveCravingSheetIndex ] ) );
     
+    mCravingExtraOffset[ mLiveCravingSheetIndex ].x = longestLine;
+    if( mObjectSearchString == NULL && defaultSearchForCraving ) {
+        removeSearchLocationSlip();
+        mSoughtObjects.deleteAll();
+        mSoughtObjects.push_back( inFoodID );
+        findInMap();
+        }
+    }
+
+
+
+void LivingLifePage::setSearchSheet() {
+    if( mLiveCravingSheetIndex > -1 ) {
+        // hide old craving sheet
+        mCravingTargetOffset[ mLiveCravingSheetIndex ] =
+            mCravingHideOffset[ mLiveCravingSheetIndex ];
+        }
+    mLiveCravingSheetIndex ++;
+
+    if( mLiveCravingSheetIndex >= NUM_HINT_SHEETS ) {
+        mLiveCravingSheetIndex -= NUM_HINT_SHEETS;
+        }
+
+    if( mCravingMessage[ mLiveCravingSheetIndex ] != NULL ) {
+        delete [] mCravingMessage[ mLiveCravingSheetIndex ];
+        mCravingMessage[ mLiveCravingSheetIndex ] = NULL;
+        }
+
+    if( mObjectSearchString == NULL ) {
+        if( mLastCravingFoodID > 0 ) {
+            setNewCraving( mLastCravingFoodID, mLastCravingYumBonus );
+            }
+        return;
+        }
+
+    const char *reasonString = "";
+
+    if( mSoughtObjects.size() < 1 ) {
+        reasonString = translate( "noMatch" );
+        }
+
+    char *message =
+        autoSprintf( "SEARCHING: %s %s",
+                     mObjectSearchString, reasonString );
+
+    mCravingMessage[ mLiveCravingSheetIndex ] = message;
+
+    mCravingTargetOffset[ mLiveCravingSheetIndex ] =
+        mCravingHideOffset[ mLiveCravingSheetIndex ];
+
+    mCravingTargetOffset[ mLiveCravingSheetIndex ].y += 64;
+
+    double longestLine = getLongestLine( 
+        (char*)( mCravingMessage[ mLiveCravingSheetIndex ] ) );
+
     mCravingExtraOffset[ mLiveCravingSheetIndex ].x = longestLine;
     }
 
 
 
+
 // color list from here:
 // https://sashat.me/2017/01/11/list-of-20-simple-distinct-colors/
 
@@ -17191,6 +17384,8 @@ void LivingLifePage::step() {
                 
                 tokens->deallocateStringElements();
                 delete tokens;
+
+                findInMap();
                 
                 if( !( mFirstServerMessagesReceived & 1 ) ) {
                     // first map chunk just recieved
@@ -17798,6 +17993,18 @@ void LivingLifePage::step() {
                             }
                         
 
+                        // Clear object search slips for this location
+                        if( old != 0 ) {
+                            for( int i=0; i<mLocationSlips.size(); i++ ) {
+                                LocationSlip *p = mLocationSlips.getElement( i );
+
+                                if( p->search && p->pos.x == x && p->pos.y == y ) {
+                                    p->temporaryExpireETA = game_getCurrentTime();
+                                    break;
+                                    }
+                                }
+                            }
+
                         // Check if a home marker has been set or removed
                         if( responsiblePlayerID != -1 &&
                             ( old != 0 ||
@@ -18194,6 +18401,7 @@ void LivingLifePage::step() {
                 }
             
             delete [] lines;
+            findInMap();
             }
         else if( type == PLAYER_UPDATE ) {
             
@@ -18527,6 +18735,8 @@ void LivingLifePage::step() {
                         existing->id == ourID ) {
                         // got a PU for self
 
+                        findInMap();
+
                         if( existing->holdingID != o.holdingID ) {
                             // holding change
                             // if we have a temp home arrow
@@ -22635,7 +22845,7 @@ void LivingLifePage::step() {
         
         char *currentText = mSayField.getText();
         
-        if( strlen( currentText ) > 0 && currentText[0] == '/' ) {
+        if( strlen( currentText ) > 0 && ( currentText[0] == '/' || currentText[0] == ':' ) ) {
             // typing a filter
             // hard cap at 25, regardless of age
             // don't want them typing long filters that overflow the display
@@ -24208,6 +24418,7 @@ void LivingLifePage::makeActive( char inFresh ) {
         }
 
     mOldHintArrows.deleteAll();
+    mSoughtObjects.deleteAll();
 
     mGlobalMessageShowing = false;
     mGlobalMessageStartTime = 0;
@@ -24276,7 +24487,7 @@ void LivingLifePage::makeActive( char inFresh ) {
     mCurrentHintObjectID = 0;
     mCurrentHintIndex = 0;
     
-    mNextHintObjectID = 0;
+    mNextHintObjectID = 1; // object search doesn't work when this is 0
     mNextHintIndex = 0;
     
     
@@ -24328,6 +24539,9 @@ void LivingLifePage::makeActive( char inFresh ) {
             mCravingMessage[i] = NULL;
             }
         }
+
+    mLastCravingFoodID = -1;
+    mLastCravingYumBonus = 0;
     
     
     for( int i=0; i<NUM_TOOL_SHEETS; i++ ) {
@@ -28638,6 +28852,55 @@ void LivingLifePage::keyDown( unsigned char inASCII ) {
                                 }
                             }
                         }
+                    else if( strlen( typedText ) > 0 &&
+                             typedText[0] == ':' ) {
+                        // object search
+                        const char *searchCommand = ":";
+                        char *filterString = 
+                            &( typedText[ strlen( searchCommand ) ] );
+
+                        if( mObjectSearchString != NULL ) {
+                            delete [] mObjectSearchString;
+                            mObjectSearchString = NULL;
+                            }
+
+                        char *trimmedFilterString = 
+                            trimWhitespace( filterString );
+
+                        int filterStringLen = 
+                            strlen( trimmedFilterString );
+
+                        if( filterStringLen > 0 ) {
+                            // not blank
+                            mObjectSearchString =
+                                stringDuplicate( trimmedFilterString );
+                            }
+
+                        delete [] trimmedFilterString;
+
+                        mSoughtObjects.deleteAll();
+                        removeSearchLocationSlip();
+                        if( mObjectSearchString != NULL ) {
+                            int remaining;
+                            int hits;
+                            ObjectRecord** hitObjects = searchObjects(
+                                mObjectSearchString,
+                                0, // don't filter out what we're holding
+                                200,
+                                &hits, &remaining );
+
+                            if( hits > 0 ) {
+                                for( int i=0; i<hits; i++ ) {
+                                    int oID = hitObjects[i]->id;
+                                    mSoughtObjects.push_back( oID );
+                                    //printf("hit %d\n", oID);
+                                    }
+                                delete [] hitObjects;
+                                findInMap();
+                                }
+                            }
+                        setSearchSheet( );
+                        }
                     else {
                         // actual, spoken text, not a /command
                         
@@ -28762,6 +29025,34 @@ void LivingLifePage::keyDown( unsigned char inASCII ) {
             keyHandledByKeybind = true;
             }
 
+        if( inASCII == searchOpenkey ) {
+            keyHandledByKeybind = true;
+            if( ! mSayField.isFocused() ) {
+                mEKeyDown = false;
+                mZKeyDown = false;
+                mXKeyDown = false;
+
+                // start typing a filter
+                mSayField.setText( ":" );
+                mSayField.focus();
+                }
+            }
+        else if( inASCII == searchClearKey ) {
+            keyHandledByKeybind = true;
+            mSayField.setText( "" );
+            mSayField.unfocus();
+
+            if( mObjectSearchString != NULL ) {
+                delete [] mObjectSearchString;
+                mObjectSearchString = NULL;
+                }
+
+            mSoughtObjects.deleteAll();
+            removeSearchLocationSlip();
+            setSearchSheet( );
+            }
+
+
         // inspired by Awbz OneLife+
         if( ( ( openSayFieldOnTypingLower && islower( inASCII ) )
               || ( openSayFieldOnTypingUpper && isupper( inASCII ) )
diff --git a/gameSource/LivingLifePage.h b/gameSource/LivingLifePage.h
index 48ef8764d..e68e49897 100644
--- a/gameSource/LivingLifePage.h
+++ b/gameSource/LivingLifePage.h
@@ -489,6 +489,7 @@ typedef struct LocationSlip {
         char temporary;
         char labeled;
         char showDistance;
+        char search;
         char tempPerson;
         int personID;
         const char *tempPersonKey;
@@ -551,6 +552,7 @@ class LivingLifePage : public GamePage, public ActionListener {
         ~LivingLifePage();
         
         void clearMap();
+        void findInMap();
         
         // enabled tutorail next time a connection loads
         void runTutorial( int inNumber );
@@ -846,6 +848,9 @@ class LivingLifePage : public GamePage, public ActionListener {
         SimpleVector<OldHintArrow> mOldHintArrows;
 
 
+        SimpleVector<int> mSoughtObjects;
+
+
         SimpleVector<TransRecord *> mLastHintSortedList;
         int mLastHintSortedSourceID;
         char *mLastHintFilterString;
@@ -868,6 +873,7 @@ class LivingLifePage : public GamePage, public ActionListener {
         char *mHintFilterString;
         char mHintFilterStringNoMatch;
 
+        char *mObjectSearchString;
         
         // offset from current view center
         doublePair mTutorialHideOffset[NUM_HINT_SHEETS];
@@ -905,9 +911,14 @@ class LivingLifePage : public GamePage, public ActionListener {
         char *mCravingMessage[NUM_HINT_SHEETS];
 
         int mLiveCravingSheetIndex;
+
+        int mLastCravingFoodID;
+        int mLastCravingYumBonus;
         
         void setNewCraving( int inFoodID, int inYumBonus );
 
+        void setSearchSheet();
+
         
 
 
@@ -1162,6 +1173,8 @@ class LivingLifePage : public GamePage, public ActionListener {
         void setLocationSlipExpiration( int seconds );
         void addLocationSlip( int inX, int inY );
         void addTempLocationSlip( int inX, int inY, char inPerson, int inPersonID, const char* inPersonKey, int inAge );
+        void addSearchLocationSlip( int inX, int inY );
+        void removeSearchLocationSlip();
         void updateLocationSlip( LocationSlip* locationSlip, int inX, int inY );
         void updatePersonLocationSlip( int inPersonID, int inX, int inY );
         void addPropertyLocationSlip( int inX, int inY );
diff --git a/gameSource/settings/wonlife-plus/defaultSearchForCraving.ini b/gameSource/settings/wonlife-plus/defaultSearchForCraving.ini
new file mode 100644
index 000000000..56a6051ca
--- /dev/null
+++ b/gameSource/settings/wonlife-plus/defaultSearchForCraving.ini
@@ -0,0 +1 @@
+1
\ No newline at end of file
diff --git a/gameSource/settings/wonlife-plus/searchClearKey.ini b/gameSource/settings/wonlife-plus/searchClearKey.ini
new file mode 100644
index 000000000..b37663f19
--- /dev/null
+++ b/gameSource/settings/wonlife-plus/searchClearKey.ini
@@ -0,0 +1 @@
+`
diff --git a/gameSource/settings/wonlife-plus/searchOpenKey.ini b/gameSource/settings/wonlife-plus/searchOpenKey.ini
new file mode 100644
index 000000000..092bc2b04
--- /dev/null
+++ b/gameSource/settings/wonlife-plus/searchOpenKey.ini
@@ -0,0 +1 @@
+;
diff --git a/gameSource/settings/wonlife-vanilla/defaultSearchForCraving.ini b/gameSource/settings/wonlife-vanilla/defaultSearchForCraving.ini
new file mode 100644
index 000000000..c22708346
--- /dev/null
+++ b/gameSource/settings/wonlife-vanilla/defaultSearchForCraving.ini
@@ -0,0 +1 @@
+0
\ No newline at end of file
diff --git a/gameSource/settings/wonlife-vanilla/searchClearKey.ini b/gameSource/settings/wonlife-vanilla/searchClearKey.ini
new file mode 100644
index 000000000..8b1378917
--- /dev/null
+++ b/gameSource/settings/wonlife-vanilla/searchClearKey.ini
@@ -0,0 +1 @@
+
diff --git a/gameSource/settings/wonlife-vanilla/searchOpenKey.ini b/gameSource/settings/wonlife-vanilla/searchOpenKey.ini
new file mode 100644
index 000000000..8b1378917
--- /dev/null
+++ b/gameSource/settings/wonlife-vanilla/searchOpenKey.ini
@@ -0,0 +1 @@
+
diff --git a/gameSource/settings/wonlife-wondible/defaultSearchForCraving.ini b/gameSource/settings/wonlife-wondible/defaultSearchForCraving.ini
new file mode 100644
index 000000000..56a6051ca
--- /dev/null
+++ b/gameSource/settings/wonlife-wondible/defaultSearchForCraving.ini
@@ -0,0 +1 @@
+1
\ No newline at end of file
diff --git a/gameSource/settings/wonlife-wondible/searchClearKey.ini b/gameSource/settings/wonlife-wondible/searchClearKey.ini
new file mode 100644
index 000000000..b37663f19
--- /dev/null
+++ b/gameSource/settings/wonlife-wondible/searchClearKey.ini
@@ -0,0 +1 @@
+`
diff --git a/gameSource/settings/wonlife-wondible/searchOpenKey.ini b/gameSource/settings/wonlife-wondible/searchOpenKey.ini
new file mode 100644
index 000000000..092bc2b04
--- /dev/null
+++ b/gameSource/settings/wonlife-wondible/searchOpenKey.ini
@@ -0,0 +1 @@
+;
