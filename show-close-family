diff --git a/gameSource/LivingLifePage.cpp b/gameSource/LivingLifePage.cpp
index d0006328..30273062 100644
--- a/gameSource/LivingLifePage.cpp
+++ b/gameSource/LivingLifePage.cpp
@@ -128,6 +128,10 @@ static int ignoreTallObjects = 1;
 
 static int showShiverSweat = 1;
 
+static int showRelationDistance = 1;
+static char playerMarkKey = '=';
+static char playerUnmarkKey = '-';
+
 static int preferObjectsOverPlayersWithScreenLock = 1;
 
 static int clickToMoveLockToInteract = 0;
@@ -722,9 +726,181 @@ char *getRelationName( LiveObject *inOurObject, LiveObject *inTheirObject ) {
 
 
 
+int getRelationDistance( SimpleVector<int> *ourLin, 
+                       SimpleVector<int> *theirLin, 
+                       int ourID, int theirID,
+                       double ourAge, double theirAge ) {
+    
+
+    if( ourLin->size() == 0 && theirLin->size() == 0 ) {
+        // both eve, no relation
+        return -1;
+        }
+
+    int cousinNum = 0;
+    int cousinRemovedNum = 0;
+    
+    for( int i=0; i<theirLin->size(); i++ ) {
+        if( theirLin->getElementDirect( i ) == ourID ) {
+            // decendant
+            return i + 1;
+            }
+        }
+
+    for( int i=0; i<ourLin->size(); i++ ) {
+        if( ourLin->getElementDirect( i ) == theirID ) {
+            // ancestor
+            return i + 1;
+            }
+        }
+    
+    // not a direct descendent or ancestor
+
+    // look for shared relation
+    int ourMatchIndex = -1;
+    int theirMatchIndex = -1;
+    
+    for( int i=0; i<ourLin->size(); i++ ) {
+        for( int j=0; j<theirLin->size(); j++ ) {
+            
+            if( ourLin->getElementDirect( i ) == 
+                theirLin->getElementDirect( j ) ) {
+                ourMatchIndex = i;
+                theirMatchIndex = j;
+                break;
+                }
+            }
+        if( ourMatchIndex != -1 ) {
+            break;
+            }
+        }
+    
+    if( ourMatchIndex == -1 ) {
+        return -1;
+        }
+    
+
+    if( theirMatchIndex == 0 && ourMatchIndex == 0 ) {
+        // brother/sister/twin
+        if( ourAge < theirAge - 0.1 ) {
+            return 2;
+            }
+        else if( ourAge > theirAge + 0.1 ) {
+            return 2;
+            }
+        else {
+            // close enough together in age
+            return 1;
+            }
+        }
+    else if( theirMatchIndex == 0 ) {
+        //aunt/uncle
+        return (ourMatchIndex * 2) + 1;
+        }
+    else if( ourMatchIndex == 0 ) {
+        //nephew/niece
+        return (theirMatchIndex * 2) + 1;
+        }
+    else {
+        // cousin of some kind
+        
+        // shallowest determines cousin number
+        // diff determines removed number
+        if( ourMatchIndex <= theirMatchIndex ) {
+            cousinNum = ourMatchIndex;
+            cousinRemovedNum = theirMatchIndex - ourMatchIndex;
+            }
+        else {
+            cousinNum = theirMatchIndex;
+            cousinRemovedNum = ourMatchIndex - theirMatchIndex;
+            }
+        return ((cousinNum + cousinRemovedNum) * 3) + 1;
+        }
+
+    return -1;
+    }
+
+
+int getRelationDistance( LiveObject *inOurObject, LiveObject *inTheirObject ) {
+    SimpleVector<int> ourLin = inOurObject->lineage;
+    SimpleVector<int> theirLin = inTheirObject->lineage;
+    
+    int ourID = inOurObject->id;
+    int theirID = inTheirObject->id;
+
+    
+    return getRelationDistance( &ourLin, &theirLin, ourID, theirID,
+                            inOurObject->age,
+                            inTheirObject->age );
+    }
+
+
+
+
+void testRelation( SimpleVector<int>* ourLin, SimpleVector<int>* theirLin, const char* testName, int expectedDistance ) {
+    char* name;
+    int distance;
+
+    name = getRelationName( ourLin, theirLin,
+            1, 2,
+            0, 0,
+            1, 2,
+            2, 2);
+    distance = getRelationDistance( ourLin, theirLin,
+            1, 2,
+            1, 2 );
+    printf( "%s: %s %d(%d)\n", testName, name, distance, expectedDistance );
+    if( distance != expectedDistance ) {
+        printf( "------------------- ERROR ----------------\n" );
+        }
+
+
+    delete [] name;
+    ourLin->deleteAll();
+    theirLin->deleteAll();
+}
+
+
+void testRelations() {
+    SimpleVector<int> ourLin;
+    SimpleVector<int> theirLin;
+
+    ourLin.push_back(2);
+    testRelation( &ourLin, &theirLin, "mother", 0 );
+
+    theirLin.push_back(1);
+    testRelation( &ourLin, &theirLin, "child", 0 );
+
+    ourLin.push_back(3);
+    ourLin.push_back(2);
+    testRelation( &ourLin, &theirLin, "grandmother", 1 );
 
+    theirLin.push_back(3);
+    theirLin.push_back(1);
+    testRelation( &ourLin, &theirLin, "grandchild", 1 );
 
+    ourLin.push_back(3);
+    theirLin.push_back(3);
+    testRelation( &ourLin, &theirLin, "sibling", 1 );
 
+    ourLin.push_back(3);
+    theirLin.push_back(4);
+    theirLin.push_back(3);
+    testRelation( &ourLin, &theirLin, "neice", 2 );
+
+    ourLin.push_back(4);
+    ourLin.push_back(3);
+    theirLin.push_back(3);
+    testRelation( &ourLin, &theirLin, "aunt", 2 );
+
+    ourLin.push_back(4);
+    ourLin.push_back(3);
+    theirLin.push_back(5);
+    theirLin.push_back(3);
+    testRelation( &ourLin, &theirLin, "first cousin", 3 );
+
+    quitGame();
+    }
 
 
 // base speed for animations that aren't speeded up or slowed down
@@ -2305,6 +2481,27 @@ LivingLifePage::LivingLifePage()
 
     showShiverSweat = SettingsManager::getIntSetting( "showShiverSweat", 1 );
 
+    showRelationDistance = SettingsManager::getIntSetting( "showRelationDistance", 1 );
+
+    char *markKeyString = SettingsManager::getStringSetting( "playerMarkKey" );
+
+    if( markKeyString != NULL ) {
+        if( strlen( markKeyString ) == 1 ) {
+            playerMarkKey = markKeyString[0];
+            }
+        delete [] markKeyString;
+        }
+
+    markKeyString = SettingsManager::getStringSetting( "playerUnmarkKey" );
+
+    if( markKeyString != NULL ) {
+        if( strlen( markKeyString ) == 1 ) {
+            playerUnmarkKey = markKeyString[0];
+            }
+        delete [] markKeyString;
+        }
+
+
     preferObjectsOverPlayersWithScreenLock = SettingsManager::getIntSetting( "preferObjectsOverPlayersWithScreenLock", 1 );
 
     openSayFieldOnTypingLower = SettingsManager::getIntSetting( "openSayFieldOnTypingLower", 0 );
@@ -2611,6 +2808,8 @@ LivingLifePage::LivingLifePage()
     if( ! tutorialDone ) {
         mTutorialNumber = 1;
         }
+
+    //testRelations();
     }
 
 
@@ -2960,6 +3159,7 @@ LiveObject *LivingLifePage::getLiveObject( int inID ) {
 
 
 
+
 SimpleVector<char*> *splitLines( const char *inString,
                                  double inMaxWidth ) {
     
@@ -3781,6 +3981,27 @@ void LivingLifePage::drawMapCell( int inMapI,
 
                 }
 
+            
+        if ( showRelationDistance ) {
+            char* des = obj->description;
+
+            if( strstr( des, "origGrave" ) != NULL ) {
+                for( int g=0; g<mGraveInfo.size(); g++ ) {
+                    GraveInfo *gI = mGraveInfo.getElement( g );
+                    
+                    if( 0 <= gI->relationDistance && gI->relationDistance < 3 &&
+                        gI->worldPos.x == inScreenX / CELL_D &&
+                        gI->worldPos.y == inScreenY / CELL_D ) {
+                            doublePair offset = {0, 20};
+                            offset = add( offset, passPos );
+                            drawRelationDistance( gI->relationDistance, offset );
+
+                            break;
+                        }
+                    }
+                }
+            }
+
         if( mMapContainedStacks[ inMapI ].size() > 0 ) {
             int *stackArray = 
                 mMapContainedStacks[ inMapI ].getElementArray();
@@ -4240,6 +4461,13 @@ ObjectAnimPack LivingLifePage::drawLiveObject(
             setAnimationHeat( 0.5 );
             }
         
+        if ( showRelationDistance ) {
+            setAnimationRelationDistance( inObj->relationDistance );
+            }
+        else {
+            setAnimationRelationDistance( -1 );
+            }
+        
         holdingPos =
             drawObjectAnim( inObj->displayID, 2, curType, 
                             timeVal,
@@ -4482,6 +4710,13 @@ ObjectAnimPack LivingLifePage::drawLiveObject(
                 setAnimationHeat( 0.5 );
                 }
             
+            if ( showRelationDistance ) {
+                setAnimationRelationDistance( inObj->relationDistance );
+                }
+            else {
+                setAnimationRelationDistance( -1 );
+                }
+            
 
             // rideable object
             holdingPos =
@@ -4561,6 +4796,13 @@ ObjectAnimPack LivingLifePage::drawLiveObject(
                     setAnimationHeat( 0.5 );
                     }
                 
+                if ( showRelationDistance ) {
+                    setAnimationRelationDistance( babyO->relationDistance );
+                    }
+                else {
+                    setAnimationRelationDistance( -1 );
+                    }
+                
                 doublePair babyHeldPos = holdPos;
                 
                 if( babyO->babyWiggle ) {
@@ -11541,6 +11783,7 @@ void LivingLifePage::step() {
                       gravePerson->name != NULL ) ) {
                     
                     GraveInfo g;
+                    g.relationDistance = gravePerson->relationDistance;
                     g.worldPos.x = posX;
                     g.worldPos.y = posY;
                     g.creationTime = game_getCurrentTime();
@@ -11750,6 +11993,14 @@ void LivingLifePage::step() {
                 GraveInfo g;
                 g.worldPos.x = posX;
                 g.worldPos.y = posY;
+
+                g.relationDistance = getRelationDistance( 
+                    &( ourLiveObject->lineage ),
+                    &otherLin,
+                    ourID,
+                    playerID,
+                    ourLiveObject->age,
+                    age );
                 
                 char *des = relationName;
                 char *desToDelete = NULL;
@@ -13280,6 +13531,7 @@ void LivingLifePage::step() {
 
                 o.name = NULL;
                 o.relationName = NULL;
+                o.relationDistance = -1;
 
                 o.curseLevel = 0;
                 o.excessCursePoints = 0;
@@ -16323,6 +16575,8 @@ void LivingLifePage::step() {
                         */
                         other->relationName = getRelationName( ourObject,
                                                                other );
+                        other->relationDistance = getRelationDistance( ourObject,
+                                                               other );
                         }
                     }
                 }
@@ -20356,6 +20610,39 @@ bool LivingLifePage::tryInteractionKeys( char inASCII ) {
     }
 
 
+void LivingLifePage::playerMark() {
+    PersonHitRecord p;
+    checkForPersonHit(p);
+    if( p.targetID > 0 ) {
+        LiveObject* target = getLiveObject( p.targetID );
+        if( target ) {
+            if( target->relationDistance < 0 ) {
+                target->relationDistance = 2;
+                }
+            else if( target->relationDistance > 0 ) {
+                target->relationDistance--;
+                }
+            }
+        }
+    }
+
+
+void LivingLifePage::playerUnmark() {
+    PersonHitRecord p;
+    checkForPersonHit(p);
+    if( p.targetID > 0 ) {
+        LiveObject* target = getLiveObject( p.targetID );
+        if( target ) {
+            if( target->relationDistance < 0 ) {
+                }
+            else if( target->relationDistance < INT_MAX ) {
+                target->relationDistance++;
+                }
+            }
+        }
+    }
+
+
 void LivingLifePage::pointerDown( float inX, float inY ) {
     lastMouseX = inX;
     lastMouseY = inY;
@@ -21938,6 +22225,15 @@ void LivingLifePage::keyDown( unsigned char inASCII ) {
             keyHandledByKeybind = tryInteractionKeys( inASCII );
             }
 
+        if( inASCII == playerMarkKey ) {
+            playerMark();
+            keyHandledByKeybind = true;
+            }
+        else if( inASCII == playerUnmarkKey ) {
+            playerUnmark();
+            keyHandledByKeybind = true;
+            }
+
         // inspired by Awbz OneLife+
         if( ( ( openSayFieldOnTypingLower && islower( inASCII ) )
               || ( openSayFieldOnTypingUpper && isupper( inASCII ) )
diff --git a/gameSource/LivingLifePage.h b/gameSource/LivingLifePage.h
index 1af9826e..38d00691 100644
--- a/gameSource/LivingLifePage.h
+++ b/gameSource/LivingLifePage.h
@@ -66,6 +66,7 @@ typedef struct LiveObject {
         char *name;
 
         char *relationName;
+        int relationDistance;
         
         int curseLevel;
         
@@ -329,6 +330,8 @@ typedef struct GraveInfo {
         // used to detect when we've moused away, even if not mousing
         // over another grave
         double lastMouseOverTime;
+
+        int relationDistance;
     } GraveInfo;
         
 
@@ -870,6 +873,9 @@ class LivingLifePage : public GamePage, public ActionListener {
 
         bool tryInteractionKeys( char inASCII );
 
+        void playerMark();
+        void playerUnmark();
+
 
         LiveObject *getOurLiveObject();
         LiveObject *getLiveObject( int inID );
diff --git a/gameSource/animationBank.cpp b/gameSource/animationBank.cpp
index 80c61d4d..044a5d3b 100644
--- a/gameSource/animationBank.cpp
+++ b/gameSource/animationBank.cpp
@@ -71,6 +71,8 @@ static char mouthFrameOutputStarted = false;
 static SpriteHandle sweatDrop;
 const char *sweatDropFile = "sprites/88.tga"; // - 0.12
 
+static SpriteHandle loveHeart;
+const char *loveHeartFile = "sprites/2521.tga"; // - 0.12
 
 
 
@@ -154,6 +156,8 @@ int initAnimationBankStart( char *outRebuildingCache ) {
     
     sweatDrop = loadSpriteBase( sweatDropFile, false );
 
+    loveHeart = loadSpriteBase( loveHeartFile, false );
+
 
     maxID = 0;
 
@@ -519,6 +523,9 @@ void freeAnimationBank() {
 
     freeSprite( sweatDrop );
     sweatDrop = NULL;
+
+    freeSprite( loveHeart );
+    loveHeart = NULL;
     
     if( mouthShapeFrameList != NULL ) {
         delete [] mouthShapeFrameList;
@@ -1216,6 +1223,29 @@ void setAnimationHeat( float heat ) {
     }
 
 
+static float drawWithRelationDistance = -1;
+
+void setAnimationRelationDistance( int distance ) {
+    drawWithRelationDistance = distance;
+    }
+
+void drawRelationDistance( int distance, doublePair inPos ) {
+    // Family hearts
+    if( distance >= 0 &&
+        distance < 4 ) {
+
+        setDrawColor( 1, 1, 1, 1 );
+        setDrawFade(0.5);
+        drawSprite( loveHeart,
+                    inPos,
+                    (distance == 0) ? 5.0 : (3.0 / distance),
+                    0.0,
+                    false);
+        setDrawFade(1.0);
+        }
+    }
+
+
 
 ObjectAnimPack drawObjectAnimPacked( 
     int inObjectID,
@@ -2321,6 +2351,15 @@ HoldingPos drawObjectAnim( int inObjectID, int inDrawBehindSlots,
                 animHeadRotDelta *= -1;
                 }
             
+            // Family hearts
+            if( obj->person &&
+                drawWithRelationDistance >= 0 &&
+                drawWithRelationDistance < 3 ) {
+                doublePair offset = {0, 50};
+                offset = add( offset, animHeadPos );
+                offset = add( offset, inPos );
+                drawRelationDistance( drawWithRelationDistance, offset );
+                }
             }
 
         
diff --git a/gameSource/animationBank.h b/gameSource/animationBank.h
index 952d1806..75c96dcf 100644
--- a/gameSource/animationBank.h
+++ b/gameSource/animationBank.h
@@ -447,6 +447,9 @@ void setAnimationEmotion( Emotion *inEmotion );
 
 void setAnimationHeat( float heat );
 
+void setAnimationRelationDistance( int ditance );
+void drawRelationDistance( int ditance, doublePair inPos );
+
 
 // sets fade values for clothing highlights of next drawn person
 // or NULL for no clothing highlights
diff --git a/gameSource/settings/playerMarkKey.ini b/gameSource/settings/playerMarkKey.ini
new file mode 100644
index 00000000..d82b2311
--- /dev/null
+++ b/gameSource/settings/playerMarkKey.ini
@@ -0,0 +1 @@
+= (+ unshifted)
diff --git a/gameSource/settings/playerUnmarkKey.ini b/gameSource/settings/playerUnmarkKey.ini
new file mode 100644
index 00000000..39cdd0de
--- /dev/null
+++ b/gameSource/settings/playerUnmarkKey.ini
@@ -0,0 +1 @@
+-
diff --git a/gameSource/settings/showRelationDistance.ini b/gameSource/settings/showRelationDistance.ini
new file mode 100644
index 00000000..d00491fd
--- /dev/null
+++ b/gameSource/settings/showRelationDistance.ini
@@ -0,0 +1 @@
+1
