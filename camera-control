diff --git a/gameSource/LivingLifePage.cpp b/gameSource/LivingLifePage.cpp
index 821d0520..52012606 100644
--- a/gameSource/LivingLifePage.cpp
+++ b/gameSource/LivingLifePage.cpp
@@ -48,6 +48,17 @@
 
 #include "minorGems/crypto/hashes/sha1.h"
 
+
+/*
+# makefile additions
+PLATFORM_SET_MOUSE = ${ROOT_PATH}/minorGems/ui/SetMouse${PLATFORM}
+
+SET_MOUSE_H = ${ROOT_PATH}/minorGems/ui/SetMouse.h
+SET_MOUSE_CPP = ${PLATFORM_SET_MOUSE}.cpp
+SET_MOUSE_O = ${PLATFORM_SET_MOUSE}.o
+*/
+#include "minorGems/ui/SetMouse.h"
+
 #include <stdlib.h>//#include <math.h>
 
 
@@ -227,6 +238,14 @@ static int screenCenterPlayerOffsetX, screenCenterPlayerOffsetY;
 static float lastMouseX = 0;
 static float lastMouseY = 0;
 
+static doublePair lastScreenEdge = {0,0};
+static float screenEdgePushSpeed = 10;
+static int mapLeftLimit = MAP_D/2;
+static int mapRightLimit = MAP_D/2;
+static int mapBottomLimit = MAP_D/2;
+static int mapTopLimit = MAP_D/2;
+static char freeCamera = false;
+static char cameraKey = 0;
 
 // set to true to render for teaser video
 static char teaserVideo = false;
@@ -2791,6 +2810,24 @@ LivingLifePage::LivingLifePage()
     // allow ctrl-v to paste into chat from clipboard
     mSayField.usePasteShortcut( true );
 
+    // set to 0 to disable screen edge push
+    screenEdgePushSpeed = SettingsManager::getFloatSetting( "screenEdgePushSpeed", 10 );
+
+    // set to 0 to disable screen edge push
+    char* cameraKeyString = SettingsManager::getStringSetting( "camerakey" );
+
+    if( cameraKeyString != NULL ) {
+        if( strlen( cameraKeyString ) == 1 ) {
+            cameraKey = cameraKeyString[0];
+            }
+        delete [] cameraKeyString;
+        }
+
+    mapLeftLimit = mMapD/2;
+    mapRightLimit = mMapD/2;
+    mapBottomLimit = mMapD/2;
+    mapTopLimit = mMapD/2;
+
     //
     // set to 0 to disable double click to run; you can't click twice in 1 frame
     maxDoubleClickFrames = SettingsManager::getIntSetting( "maxDoubleClickFrames", 30 );
@@ -15104,6 +15141,43 @@ void LivingLifePage::step() {
             mMapOffsetX = newMapOffsetX;
             mMapOffsetY = newMapOffsetY;
             
+            if( mFirstServerMessagesReceived & 1 ) {
+                mapLeftLimit += xMove;
+                mapRightLimit += xMove;
+                mapTopLimit += yMove;
+                mapBottomLimit += yMove;
+                }
+            int left = -sizeX/2 + mMapD / 2 + 1;
+            int right = sizeX/2 + mMapD / 2 - 1;
+            if( left < mapLeftLimit ) {
+                mapLeftLimit = left;
+                }
+            if( right > mapRightLimit ) {
+                mapRightLimit = right;
+                }
+            int bottom = -sizeY/2 + mMapD / 2 + 1;
+            int top = sizeY/2 + mMapD / 2 - 1;
+            if( bottom < mapBottomLimit ) {
+                mapBottomLimit = bottom;
+                }
+            if( top > mapTopLimit ) {
+                mapTopLimit = top;
+                }
+
+            if( mapLeftLimit < 0 ) {
+                mapLeftLimit = 0;
+                }
+            if( mapRightLimit > mMapD-1 ) {
+                mapRightLimit = mMapD-1;
+                }
+            if( mapBottomLimit < 0 ) {
+                mapBottomLimit = 0;
+                }
+            if( mapTopLimit > mMapD-1 ) {
+                mapTopLimit = mMapD-1;
+                }
+
+
             
             unsigned char *compressedChunk = 
                 new unsigned char[ compressedSize ];
@@ -20600,6 +20674,30 @@ void LivingLifePage::step() {
 
         doublePair screenTargetPos = 
             mult( targetObjectPos, CELL_D );
+
+        int viewLeftLimit = viewWidth/3;
+        int viewRightLimit = viewWidth/3;
+        int viewBottomLimit = viewHeight/6;
+        int viewTopLimit = viewHeight/5;
+
+        if( lastScreenEdge.x != 0 || lastScreenEdge.y != 0 ) {
+            viewLeftLimit = viewWidth/2;
+            viewRightLimit = viewWidth/2;
+            viewBottomLimit = viewHeight/3;
+            viewTopLimit = viewHeight/2;
+            }
+
+        if( freeCamera ) {
+            int targetGridX =
+                lrintf( targetObjectPos.x ) - mMapOffsetX + mMapD/2;
+            int targetGridY =
+                lrintf( targetObjectPos.y ) - mMapOffsetY + mMapD/2;
+            viewLeftLimit = CELL_D*(targetGridX - mapLeftLimit) - viewWidth/2;
+            viewRightLimit = CELL_D*(mapRightLimit - targetGridX) - viewWidth/2;
+            viewBottomLimit = CELL_D*(targetGridY - mapBottomLimit) - viewHeight/3;
+            viewTopLimit = CELL_D*(mapTopLimit - targetGridY) - viewHeight/2;
+            }
+
         
         if( vogMode ) {
             // don't adjust camera
@@ -20612,6 +20710,10 @@ void LivingLifePage::step() {
             // moving
 
             // push camera out in front
+            viewLeftLimit = viewWidth/3;
+            viewRightLimit = viewWidth/3;
+            viewBottomLimit = viewHeight/6;
+            viewTopLimit = viewHeight/5;
             
 
             double moveScale = 40 * cameraFollowsObject->currentSpeed;
@@ -20643,18 +20745,6 @@ void LivingLifePage::step() {
                 lrint( moveScale * 
                        cameraFollowsObject->currentMoveDirection.y );
  
-            if( screenCenterPlayerOffsetX < -viewWidth / 3 ) {
-                screenCenterPlayerOffsetX =  -viewWidth / 3;
-                }
-            if( screenCenterPlayerOffsetX >  viewWidth / 3 ) {
-                screenCenterPlayerOffsetX =  viewWidth / 3;
-                }
-            if( screenCenterPlayerOffsetY < -viewHeight / 5 ) {
-                screenCenterPlayerOffsetY =  -viewHeight / 5;
-                }
-            if( screenCenterPlayerOffsetY >  viewHeight / 6 ) {
-                screenCenterPlayerOffsetY =  viewHeight / 6;
-                }
             }
         else if( false ) { // skip for now
             // stopped moving
@@ -20695,6 +20785,22 @@ void LivingLifePage::step() {
             
             }
 
+        screenCenterPlayerOffsetX -= lastScreenEdge.x * screenEdgePushSpeed;
+        screenCenterPlayerOffsetY -= lastScreenEdge.y * screenEdgePushSpeed;
+
+        if( screenCenterPlayerOffsetX < -viewRightLimit ) {
+            screenCenterPlayerOffsetX =  -viewRightLimit;
+            }
+        if( screenCenterPlayerOffsetX >  viewLeftLimit ) {
+            screenCenterPlayerOffsetX =  viewLeftLimit;
+            }
+        if( screenCenterPlayerOffsetY < -viewTopLimit ) {
+            screenCenterPlayerOffsetY =  -viewTopLimit;
+            }
+        if( screenCenterPlayerOffsetY >  viewBottomLimit ) {
+            screenCenterPlayerOffsetY =  viewBottomLimit;
+            }
+
         if( ! vogMode ) {
             
             screenTargetPos.x = 
@@ -20714,6 +20820,10 @@ void LivingLifePage::step() {
         if( !shouldMoveCamera ) {
             screenTargetPos = lastScreenViewCenter;
             }
+
+        if( freeCamera ) {
+            lastScreenViewCenter = screenTargetPos;
+            }
         
 
         doublePair dir = sub( screenTargetPos, lastScreenViewCenter );
@@ -22047,6 +22157,7 @@ void LivingLifePage::makeActive( char inFresh ) {
     
     mouseDown = false;
     shouldMoveCamera = true;
+    freeCamera = false;
     
     screenCenterPlayerOffsetX = 0;
     screenCenterPlayerOffsetY = 0;
@@ -23181,6 +23292,30 @@ void LivingLifePage::pointerMove( float inX, float inY ) {
         }
     
     
+    
+    float spanX = viewWidth/2 - CELL_D/2;
+    float spanY = viewHeight/2 - CELL_D/2;
+    doublePair delta = {
+        inX - lastScreenViewCenter.x,
+        inY - lastScreenViewCenter.y
+        };
+    if (fabs(delta.x) > spanX || fabs(delta.y) > spanY) {
+        lastScreenEdge = normalize(delta);
+        }
+    else {
+        lastScreenEdge.x = 0;
+        lastScreenEdge.y = 0;
+        }
+
+    if( freeCamera ) {
+        screenCenterPlayerOffsetX -= delta.x;
+        screenCenterPlayerOffsetY -= delta.y;
+        int screenWidth, screenHeight;
+        getScreenDimensions( &screenWidth, &screenHeight );
+#ifndef LINUX
+        SetMouse(screenWidth/2, screenHeight/2);
+#endif
+        }
     }
 
 
@@ -26579,6 +26714,11 @@ void LivingLifePage::keyDown( unsigned char inASCII ) {
             keyHandledByKeybind = tryInteractionKeys( inASCII );
             }
 
+        if ( inASCII == cameraKey ) {
+            freeCamera = true;
+            keyHandledByKeybind = true;
+        }
+
         // inspired by Awbz OneLife+
         if( ( ( openSayFieldOnTypingLower && islower( inASCII ) )
               || ( openSayFieldOnTypingUpper && isupper( inASCII ) )
@@ -26787,6 +26927,9 @@ void LivingLifePage::keyUp( unsigned char inASCII ) {
         case ' ':
             shouldMoveCamera = true;
             break;
+        default:
+            if( inASCII == cameraKey ) freeCamera = false;
+            break;
         }
 
     }
diff --git a/gameSource/makeFileList b/gameSource/makeFileList
index fbdfbeca..20ab3a31 100644
--- a/gameSource/makeFileList
+++ b/gameSource/makeFileList
@@ -176,4 +176,5 @@ NEEDED_MINOR_GEMS_OBJECTS = \
  ${DIFF_BUNDLE_CLIENT_O} \
  ${STRING_TREE_O} \
  ${CRC32_O} \
+ ${SET_MOUSE_O} \
 
diff --git a/gameSource/settings/cameraKey.ini b/gameSource/settings/cameraKey.ini
new file mode 100644
index 00000000..f2ad6c76
--- /dev/null
+++ b/gameSource/settings/cameraKey.ini
@@ -0,0 +1 @@
+c
diff --git a/gameSource/settings/screenEdgePushSpeed.ini b/gameSource/settings/screenEdgePushSpeed.ini
new file mode 100644
index 00000000..573541ac
--- /dev/null
+++ b/gameSource/settings/screenEdgePushSpeed.ini
@@ -0,0 +1 @@
+0
