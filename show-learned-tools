diff --git a/gameSource/LivingLifePage.cpp b/gameSource/LivingLifePage.cpp
index e328ced55..3754e1f91 100644
--- a/gameSource/LivingLifePage.cpp
+++ b/gameSource/LivingLifePage.cpp
@@ -161,6 +161,8 @@ static int dragDropUse = 1;
 
 static int clickToMoveLockToInteract = 0;
 
+static int showLearnedTools = 0;
+
 
 typedef enum interactionKeyType {
     IK_MOVE,
@@ -3118,6 +3120,8 @@ LivingLifePage::LivingLifePage()
 
     clickToMoveLockToInteract = SettingsManager::getIntSetting( "clickToMoveLockToInteract", 0 );
 
+    showLearnedTools = SettingsManager::getIntSetting( "showLearnedTools", 0 );
+
     interactionKeysEnabled = SettingsManager::getIntSetting( "interactionKeysEnabled", 1 );
 
     initKeybinds();
@@ -3206,6 +3210,18 @@ LivingLifePage::LivingLifePage()
         mYumSlipPosTargetOffset[i] = mYumSlipHideOffset[i];
         }
     
+    for( int i=0; i<NUM_TOOL_SHEETS; i++ ) {
+        mToolBoxHideOffset[i].x = 0;
+        mToolBoxHideOffset[i].y = 430;
+        
+        mToolBoxTargetOffset[i] = mToolBoxHideOffset[i];
+        mToolBoxPosOffset[i] = mToolBoxHideOffset[i];
+        mToolBoxTool[i] = -1;
+        mToolBoxFreeze[i] = 0;
+        }
+
+    mKnownToolSlips = 0;
+    mForceToolRefresh = false;
 
     for( int i=0; i<3; i++ ) {    
         mHungerSlipShowOffsets[i].x = -558;
@@ -3923,6 +3939,77 @@ void drawHelpMarkKeys( doublePair messagePos ) {
     }
 
 
+
+doublePair getSayPosition( LiveObject* liveObject ) {
+    doublePair pos = {0,84};
+    if( liveObject == NULL ) {
+        return pos;
+        }
+    pos = mult( liveObject->currentPos, CELL_D );
+
+    pos.y += 84;
+
+    ObjectRecord *displayObj = getObject( liveObject->displayID );
+
+
+    double age = computeCurrentAge( liveObject );
+    
+    doublePair headPos = 
+        displayObj->spritePos[ getHeadIndex( displayObj, age ) ];
+    
+    doublePair bodyPos = 
+        displayObj->spritePos[ getBodyIndex( displayObj, age ) ];
+
+    doublePair frontFootPos = 
+        displayObj->spritePos[ getFrontFootIndex( displayObj, age ) ];
+    
+    headPos = add( headPos, 
+                   getAgeHeadOffset( age, headPos, 
+                                     bodyPos, frontFootPos ) );
+    headPos = add( headPos,
+                   getAgeBodyOffset( age, bodyPos ) );
+    
+    pos.y += headPos.y;
+    return pos;
+    }
+
+
+void LivingLifePage::drawToolSlip( doublePair inPos, int inTool, int slip ) {
+    setDrawColor( 1, 1, 1, 1 );
+
+    drawSprite( mYumSlipSprites[slip%NUM_YUM_SLIPS], inPos, 1.0, 0.5 );
+
+    inPos.y += 3;
+    
+    if( inTool > -1 ) {
+        ObjectRecord *knownObject = getObject( inTool );
+        doublePair knownObjectDrawPos = inPos;
+
+        double scale = 120 / (double)getMaxDiameter( knownObject );
+
+        if( !knownObject->person ) {
+            knownObjectDrawPos = sub( knownObjectDrawPos,
+                              mult( getObjectVisualCenter( knownObject ), scale) );
+            }
+
+        setDrawColor( 0.1, 0.1, 0.1, 1 );
+        int limit = knownObject->numSprites;
+        for( int i=0; i<limit; i++ ) {
+            if( knownObject->spriteSkipDrawing != NULL &&
+                knownObject->spriteSkipDrawing[i] ) {
+                continue;
+                }
+            doublePair spritePos = mult( knownObject->spritePos[i], scale);
+            doublePair pos = add( spritePos, knownObjectDrawPos );
+            int spriteID = knownObject->sprites[i];
+            double rot = knownObject->spriteRot[i];
+            drawSpriteAlphaOnly( getSprite( spriteID ), pos, scale, rot, 
+                        knownObject->spriteHFlip[i]);
+            }
+        }
+    }
+
+
 SimpleVector<char*> *splitLines( const char *inString,
                                  double inMaxWidth ) {
     
@@ -10408,6 +10495,21 @@ void LivingLifePage::draw( doublePair inViewCenter,
         }
 
 
+    if( showLearnedTools )
+    for( int i=NUM_TOOL_SHEETS-1; i>=0; i-- ) {
+        if( ! equal( mToolBoxPosOffset[i], mToolBoxHideOffset[i] ) 
+            &&
+            true ) {
+            
+            doublePair toolPos  = 
+                add( mToolBoxPosOffset[i], lastScreenViewCenter );
+            
+             drawToolSlip( toolPos, mToolBoxTool[i], (i*723%11) );
+
+            }
+        }
+
+
 
     // now draw tutorial sheets
     if( mTutorialNumber > 0 || mGlobalMessageShowing )
@@ -13430,6 +13532,19 @@ void LivingLifePage::displayGlobalMessage( char *inMessage ) {
     
     
     mGlobalMessageShowing = true;
+
+    if( strncmp( spaces, "YOU LEARNED ", 12 ) == 0 ) {
+        mForceToolRefresh = true;
+        mGlobalMessageShowing = false;
+        if( mTutorialSound != NULL ) {
+                playSoundSprite( mTutorialSound, 
+                                 0.18 * getSoundEffectsLoudness(), 
+                                 0.5 );
+            }
+        }
+
+
+    if( mGlobalMessageShowing ) {
     mGlobalMessageStartTime = game_getCurrentTime();
     
     if( mLiveTutorialSheetIndex >= 0 ) {
@@ -13457,6 +13572,7 @@ void LivingLifePage::displayGlobalMessage( char *inMessage ) {
         (char*)( mTutorialMessage[ mLiveTutorialSheetIndex ] ) );
     
     mTutorialExtraOffset[ mLiveTutorialSheetIndex ].x = longestLine;
+    } //if( mGlobalMessageShowing ) {
     
     
     delete [] spaces;
@@ -14299,6 +14415,42 @@ void LivingLifePage::step() {
             }
         
 
+        if( showLearnedTools )
+        if( mCurrentHintObjectID != mNextHintObjectID ||
+            mForceHintRefresh || mForceToolRefresh ) {
+            mForceToolRefresh = false;
+
+            ObjectRecord *o = getObject( mNextHintObjectID );
+            int remainingSlots = (totalToolSlots - usedToolSlots);
+            if( remainingSlots < 0 ) remainingSlots = 0;
+            int showSlots = mKnownToolSlips + remainingSlots;
+            float offset = 1220.0 / showSlots;
+            if (offset > 64) offset = 64;
+            int left = showSlots * offset / -2;
+            if( o && o->toolSetIndex != -1 ) {
+                int i = 0;
+                int slip = 0;
+                for( ;i < NUM_TOOL_SHEETS && i < mKnownToolSlips;i++,slip++ ) {
+                    mToolBoxHideOffset[i].x = left + (int)(slip * offset);
+                    mToolBoxTargetOffset[i] = mToolBoxHideOffset[i];
+                    mToolBoxTargetOffset[i].y -= 100;
+                    }
+                for( ;i < NUM_TOOL_SHEETS - remainingSlots;i++ ) {
+                    mToolBoxTargetOffset[i] = mToolBoxHideOffset[i];
+                    }
+                for( ;i < NUM_TOOL_SHEETS;i++,slip++ ) {
+                    mToolBoxHideOffset[i].x = left + (int)(slip * offset);
+                    mToolBoxTargetOffset[i] = mToolBoxHideOffset[i];
+                    mToolBoxTargetOffset[i].y -= 70;
+                    }
+                }
+            else {
+                for( int i = 0;i < NUM_TOOL_SHEETS;i++ ) {
+                    mToolBoxTargetOffset[i] = mToolBoxHideOffset[i];
+                    }
+                }
+            }
+
 
         if( ( isHintFilterStringInvalid() &&
               mCurrentHintObjectID != mNextHintObjectID ) ||
@@ -14517,6 +14669,49 @@ void LivingLifePage::step() {
         }
 
 
+
+    if( showLearnedTools )
+    for( int i=0; i<NUM_TOOL_SHEETS; i++ ) {
+        doublePair target = mToolBoxTargetOffset[i];
+
+        if( mToolBoxFreeze[i] > 0 ) {
+            mToolBoxFreeze[i] -= frameRateFactor/60.0;
+            }
+        else if( ! equal( mToolBoxPosOffset[i], target) ) {
+            doublePair delta = 
+                sub( target, mToolBoxPosOffset[i] );
+            
+            double d = distance( target, mToolBoxPosOffset[i] );
+            
+            
+            if( d <= 1 ) {
+                mToolBoxPosOffset[i] = target;
+                }
+            else {
+                int speed = lrint( frameRateFactor * d / (64/4)); //frameRateFactor * 4;
+                
+                //if( d < 8 ) {
+                    //speed = lrint( frameRateFactor * d / 2 );
+                    //}
+                
+                if( speed > d ) {
+                    speed = floor( d );
+                    }
+                
+                if( speed < 1 ) {
+                    speed = 1;
+                    }
+                
+                doublePair dir = normalize( delta );
+                
+                mToolBoxPosOffset[i] = 
+                    add( mToolBoxPosOffset[i],
+                         mult( dir, speed ) );
+                }
+            
+            }
+        }
+
     // should new tutorial sheet be shown?
     if( ( mTutorialNumber > 0 || mGlobalMessageShowing ) 
         && ourObject != NULL ) {
@@ -15109,13 +15304,20 @@ void LivingLifePage::step() {
             for( int i=1; i < tokens->size(); i++ ) {
                 char *tok = tokens->getElementDirect( i );
                 
+                doublePair pos = sub( getSayPosition( getOurLiveObject() ), lastScreenViewCenter );
                 int id = 0;
                 sscanf( tok, "%d", &id );
                 if( id > 0 ) {
                     ObjectRecord *o = getObject( id );
                     
-                    if( o != NULL ) {
+                    if( o != NULL && !o->toolLearned ) {
                         o->toolLearned = true;
+                        if( !o->isUseDummy && mKnownToolSlips < NUM_TOOL_SHEETS ) {
+                            mToolBoxPosOffset[mKnownToolSlips] = pos;
+                            mToolBoxFreeze[mKnownToolSlips] = 2.0;
+                            mToolBoxTool[mKnownToolSlips++] = id;
+                            //printf( "learned %d: %s\n", id, o->description );
+                            }
                         }
                     }
                 }
@@ -15168,6 +15370,7 @@ void LivingLifePage::step() {
             if( numRead == 2 ) {
                 usedToolSlots = numSlotsUsed;
                 totalToolSlots = numTotalSlots;
+                mForceToolRefresh = true;
                 }
             }
         else if( type == HOMELAND ) {
@@ -18301,6 +18504,15 @@ void LivingLifePage::step() {
                                 mNextHintIndex = 
                                     mHintBookmarks[ mNextHintObjectID ];
                                 }
+                            mForceToolRefresh = true;
+                            }
+
+                        if( o.id == ourID &&
+                            existing->holdingID == 0 &&
+                            existing->holdingID != oldHeld ) {
+                            for( int i = 0;i < NUM_TOOL_SHEETS;i++ ) {
+                                mToolBoxTargetOffset[i] = mToolBoxHideOffset[i];
+                                }
                             }
                         
 
@@ -23776,6 +23988,15 @@ void LivingLifePage::makeActive( char inFresh ) {
         }
     
     
+    for( int i=0; i<NUM_TOOL_SHEETS; i++ ) {
+        mToolBoxTargetOffset[i] = mToolBoxHideOffset[i];
+        mToolBoxPosOffset[i] = mToolBoxHideOffset[i];
+        mToolBoxTool[i] = -1;
+        mToolBoxFreeze[i] = 0;
+        }
+
+    mKnownToolSlips = 0;
+    mForceToolRefresh = false;
 
     savingSpeechEnabled = SettingsManager::getIntSetting( "allowSavingSpeech",
                                                           0 );
diff --git a/gameSource/LivingLifePage.h b/gameSource/LivingLifePage.h
index 38024fb4d..fe78db18d 100644
--- a/gameSource/LivingLifePage.h
+++ b/gameSource/LivingLifePage.h
@@ -32,6 +32,7 @@
 
 #define NUM_HINT_SHEETS 4
 
+#define NUM_TOOL_SHEETS 200
 
 #define NUM_HOME_ARROWS 8
 
@@ -868,7 +869,17 @@ class LivingLifePage : public GamePage, public ActionListener {
         int mLiveTutorialSheetIndex;
         int mLiveTutorialTriggerNumber;
 
+        // offset from current view center
+        doublePair mToolBoxHideOffset[NUM_TOOL_SHEETS];
+        doublePair mToolBoxPosOffset[NUM_TOOL_SHEETS];
+        doublePair mToolBoxTargetOffset[NUM_TOOL_SHEETS];
+        int mToolBoxTool[NUM_TOOL_SHEETS];
+        double mToolBoxFreeze[NUM_TOOL_SHEETS];
+
+        int mKnownToolSlips;
+        char mForceToolRefresh;
 
+        void drawToolSlip( doublePair inPos, int inTool, int slip = 0 );
 
         doublePair mCravingHideOffset[NUM_HINT_SHEETS];
         doublePair mCravingPosOffset[NUM_HINT_SHEETS];
diff --git a/gameSource/objectBank.cpp b/gameSource/objectBank.cpp
index 3062199f6..722272dbb 100644
--- a/gameSource/objectBank.cpp
+++ b/gameSource/objectBank.cpp
@@ -5433,6 +5433,43 @@ int getMaxDiameter( ObjectRecord *inObject ) {
 
 
 
+doublePair getObjectVisualCenter( ObjectRecord *inObject ) {
+    double minX = 128;
+    double maxX = -128;
+    double minY = 128;
+    double maxY = -128;
+
+    for( int i=0; i<inObject->numSprites; i++ ) {
+        doublePair pos = inObject->spritePos[i];
+        SpriteRecord *spriteRec = getSpriteRecord( inObject->sprites[i] );
+
+        // don't count transparent sprites as part of size
+        if( spriteRec != NULL && ! spriteRec->multiplicativeBlend ) {
+            double left = pos.x - spriteRec->w/2;
+            double right = pos.x + spriteRec->w/2;
+            double top = pos.y + spriteRec->h/2;
+            double bottom = pos.y - spriteRec->h/2;
+
+            if( left < minX ) {
+                minX = left;
+                }
+            if( right > maxX ) {
+                maxX = right;
+                }
+            if( top > maxY ) {
+                maxY = top;
+                }
+            if( bottom < minY ) {
+                minY = bottom;
+                }
+            }
+        }
+
+    doublePair center = { (maxX + minX)/2, (maxY + minY)/2 };
+    return center;
+    }
+
+
 int getObjectHeight( int inObjectID ) {
     ObjectRecord *o = getObject( inObjectID );
     
diff --git a/gameSource/objectBank.h b/gameSource/objectBank.h
index d1f56e973..70cd9b1fa 100644
--- a/gameSource/objectBank.h
+++ b/gameSource/objectBank.h
@@ -820,6 +820,11 @@ char checkSpriteAncestor( ObjectRecord *inRecord, int inChildIndex,
 int getMaxDiameter( ObjectRecord *inObject );
 
 
+// get the visual center of an object based on
+// sprite position and dimensions
+doublePair getObjectVisualCenter( ObjectRecord *inObject );
+
+
 // gets estimate of object height from cell center
 int getObjectHeight( int inObjectID );
 
diff --git a/gameSource/settings/wonlife-plus/showLearnedTools.ini b/gameSource/settings/wonlife-plus/showLearnedTools.ini
new file mode 100644
index 000000000..573541ac9
--- /dev/null
+++ b/gameSource/settings/wonlife-plus/showLearnedTools.ini
@@ -0,0 +1 @@
+0
diff --git a/gameSource/settings/wonlife-vanilla/showLearnedTools.ini b/gameSource/settings/wonlife-vanilla/showLearnedTools.ini
new file mode 100644
index 000000000..573541ac9
--- /dev/null
+++ b/gameSource/settings/wonlife-vanilla/showLearnedTools.ini
@@ -0,0 +1 @@
+0
diff --git a/gameSource/settings/wonlife-wondible/showLearnedTools.ini b/gameSource/settings/wonlife-wondible/showLearnedTools.ini
new file mode 100644
index 000000000..573541ac9
--- /dev/null
+++ b/gameSource/settings/wonlife-wondible/showLearnedTools.ini
@@ -0,0 +1 @@
+0
