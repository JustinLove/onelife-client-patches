diff --git a/gameSource/LivingLifePage.cpp b/gameSource/LivingLifePage.cpp
index c887a4bb2..46791f2c4 100644
--- a/gameSource/LivingLifePage.cpp
+++ b/gameSource/LivingLifePage.cpp
@@ -150,6 +150,82 @@ static int dragDropUse = 1;
 
 static int clickToMoveLockToInteract = 0;
 
+
+typedef enum interactionKeyType {
+    IK_MOVE,
+    IK_RUN,
+    IK_USE,
+    IK_DROP,
+    IK_REMV,
+    IK_SELF,
+    IK_UOTHER,
+    IK_KILL,
+    IK_EXAMINE,
+    IK_BP_USE,
+    IK_BP_DROP,
+    IK_BP_SREMV,
+    IK_COUNT,
+    } interactionKeyType;
+
+static int interactionKeysEnabled = 1;
+static char interactionKeys[IK_COUNT] = {
+    'q', // IK_MOVE
+    'a', // IK_RUN
+    'f', // IK_USE
+    'd', // IK_DROP
+    's', // IK_REMV
+    'v', // IK_SELF
+    'g', // IK_UOTHER
+    'k', // IK_KILL
+    'x', // IK_EXAMINE
+    'r', // IK_BP_USE
+    'e', // IK_BP_DROP
+    'w' // IK_SREMV
+    };
+
+static char const * const interactionKeysHelp[IK_COUNT] = {
+    "Move to", // IK_MOVE
+    "Run", // IK_RUN
+    "Use", // IK_USE
+    "Drop", // IK_DROP
+    "Remove/Cycle container", // IK_REMV
+    "Eat/Wear/Self", // IK_SELF
+    "Pickup Baby, use on Other", // IK_UOTHER
+    "Kill", // IK_KILL
+    "Examine", // IK_EXAMINE
+    "Put/Take from backpack", // IK_BP_USE
+    "Put in backpack", // IK_BP_DROP
+    "Remove/cycle in backpack" // IK_SREMV
+    };
+
+void initKeybinds() {
+    char *cont = SettingsManager::getSettingContents( "interactionKeys", "" );
+
+    if( strcmp( cont, "" ) == 0 ) {
+        delete [] cont;
+        return;
+        }
+
+    int numParts;
+    char **parts = split( cont, "\n", &numParts );
+    delete [] cont;
+
+    for( int i=0; i<numParts; i++ ) {
+        if( strcmp( parts[i], "" ) != 0 ) {
+
+            if( i < IK_COUNT ) {
+                interactionKeys[i] = parts[i][0];
+                }
+            else {
+                break;
+                }
+            }
+        delete [] parts[i];
+        }
+    delete [] parts;
+    }
+
+
 static int screenCenterPlayerOffsetX, screenCenterPlayerOffsetY;
 
 
@@ -2761,6 +2837,10 @@ LivingLifePage::LivingLifePage()
     tabNameCompletion = SettingsManager::getIntSetting( "tabNameCompletion", 1 );
 
     clickToMoveLockToInteract = SettingsManager::getIntSetting( "clickToMoveLockToInteract", 0 );
+
+    interactionKeysEnabled = SettingsManager::getIntSetting( "interactionKeysEnabled", 1 );
+
+    initKeybinds();
     
     initLiveTriggers();
 
@@ -24380,6 +24460,242 @@ static void freeSavedPath() {
 
 
 
+bool LivingLifePage::tryInteractionKeys( char inASCII ) {
+
+    CellHitRecord c;
+    PersonHitRecord p;
+    LiveObject *ourLiveObject = getOurLiveObject();
+
+    for( int command = 0; command < IK_COUNT; command++ ) {
+        if( interactionKeys[command] == inASCII ) {
+            if( playerActionPending ) {
+                return true;
+                }
+            switch( command ) {
+                case IK_MOVE:
+                    checkForCellHit( c );
+
+                    moveTo( c.cellX, c.cellY );
+                    return true;
+                case IK_RUN:
+                    checkForCellHit( c );
+
+                    moveTo( c.cellX, c.cellY );
+                    autoRun = true;
+                    return true;
+                case IK_USE:
+                    checkForCellHit( c );
+
+                    if( c.destID != 0 ) {
+                        hintForObjectInteraction( ourLiveObject->holdingID, c.destID );
+                        if( ourLiveObject->holdingID == 0 &&
+                            hasSpecialBareHandTransition( c.destID ) ) {
+
+                            removeAt( c.cellX, c.cellY );
+                            }
+                        else {
+                            useAt( c.cellX, c.cellY, c.destID );
+                            }
+                        }
+                    else if( hasEmptyTileTransition( ourLiveObject->holdingID, c.floorDestID ) ) {
+                        useAt( c.cellX, c.cellY, -1 );
+                        if( c.destID == 0 || ! getObject( c.destID )->permanent ) {
+
+                            // empty cell, or something we can swap held with
+
+                            GridPos clickPos = { c.mapX, c.mapY };
+
+                            mPrevMouseClickCells.push_back( clickPos );
+                            mPrevMouseClickCellFades.push_back( 1 );
+
+                            // instantly fade current cell to get it out of the way
+                            // of our click indicator
+                            mCurMouseOverCellFade = 0;
+                            }
+                        }
+                    return true;
+                case IK_DROP:
+                    if( ourLiveObject->holdingID == 0 ) {
+                        return true;
+                        }
+
+                    checkForCellHit( c );
+
+                    if( c.destID != 0 &&
+                        getNumContainerSlots( c.destID ) > 0 &&
+                        c.destNumContained <= getNumContainerSlots( c.destID ) ) {
+                        useAt( c.cellX, c.cellY, c.destID );
+                        }
+                    else if( c.destID == 0 &&
+                        ourLiveObject->holdingID > 0 &&
+                        getObject( ourLiveObject->holdingID )->permanent ) {
+                        useAt( c.cellX, c.cellY, -1 );
+                        }
+                    else {
+                        dropAt( c.cellX, c.cellY );
+                        }
+                    if( c.destID == 0 || ! getObject( c.destID )->permanent ) {
+
+                        // empty cell, or something we can swap held with
+
+                        GridPos clickPos = { c.mapX, c.mapY };
+
+                        mPrevMouseClickCells.push_back( clickPos );
+                        mPrevMouseClickCellFades.push_back( 1 );
+
+                        // instantly fade current cell to get it out of the way
+                        // of our click indicator
+                        mCurMouseOverCellFade = 0;
+                        }
+                    return true;
+                case IK_REMV:
+                    checkForCellHit( c );
+
+                    if( c.destID == 0 ) {
+                        return true;
+                        }
+                    else if( ourLiveObject->holdingID == 0 ) {
+                        if( hasSpecialBareHandTransition( c.destID ) ) {
+                            useAt( c.cellX, c.cellY, c.destID );
+                            }
+                        else {
+                            removeAt( c.cellX, c.cellY );
+                            }
+                        }
+                    else {
+                        dropAt( c.cellX, c.cellY );
+                        }
+                    return true;
+                case IK_SELF:
+                   if( ! ourLiveObject->inMotion ) {
+                       if( ourLiveObject->holdingID > 0 &&
+                           getObject( ourLiveObject->holdingID )->foodValue > 0 ) {
+                           nextActionEating = true;
+                           }
+
+                       if( nextActionMessageToSend != NULL ) {
+                           delete [] nextActionMessageToSend;
+                           nextActionMessageToSend = NULL;
+                           }
+
+                       nextActionMessageToSend =
+                           autoSprintf( "SELF %d %d -1#",
+                                        sendX( ourLiveObject->xd ), sendY( ourLiveObject->yd ) );
+                       playerActionTargetX = ourLiveObject->xd;
+                       playerActionTargetY = ourLiveObject->yd;
+                       }
+                    return true;
+                case IK_UOTHER:
+                    checkForPersonHit( p );
+
+                    if( ourLiveObject->holdingID == 0 ) {
+                        pickupBabyAt( p.cellX, p.cellY, p.targetID );
+                        }
+                    else {
+                        useOnOtherAt( p.cellX, p.cellY, p.targetID );
+                        }
+                    return true;
+                case IK_KILL:
+                    checkForPersonHit( p );
+
+                    if( ourLiveObject->holdingID != 0 ) {
+                        killAt( p.cellX, p.cellY, p.targetID );
+                        }
+                    return true;
+                case IK_EXAMINE:
+                    checkForCellHit( c );
+
+                    if( c.destID > 0 ) {
+                        mNextHintObjectID = c.destID;
+                        mNextHintIndex = mHintBookmarks[ c.destID ];
+                        }
+                    else if( c.floorDestID > 0 ) {
+                        mNextHintObjectID = c.floorDestID;
+                        mNextHintIndex = mHintBookmarks[ c.floorDestID ];
+                        }
+                    return true;
+                case IK_BP_USE:
+                    if( ! ourLiveObject->inMotion
+                        && ourLiveObject->clothing.backpack != NULL ) {
+
+                        if( nextActionMessageToSend != NULL ) {
+                            delete [] nextActionMessageToSend;
+                            nextActionMessageToSend = NULL;
+                            }
+
+                        if( ourLiveObject->holdingID > 0
+                         || getTrans( 0, ourLiveObject->clothing.backpack-> id ) != NULL ) {
+                            nextActionMessageToSend =
+                                autoSprintf( "SELF %d %d 5#",
+                                        sendX( ourLiveObject->xd ), sendY( ourLiveObject->yd ) );
+                            }
+                        else {
+                            nextActionMessageToSend =
+                                autoSprintf( "SREMV %d %d 5 -1#",
+                                        sendX( ourLiveObject->xd ), sendY( ourLiveObject->yd ) );
+                            }
+
+                        playerActionTargetX = ourLiveObject->xd;
+                        playerActionTargetY = ourLiveObject->yd;
+                        }
+                    return true;
+                case IK_BP_DROP:
+                    if( mEKeyEnabled ) {
+                        return true;
+                        }
+                    else {
+                        if( ! ourLiveObject->inMotion
+                            && ourLiveObject->clothing.backpack != NULL ) {
+                            if( ourLiveObject->holdingID > 0 ) {
+                                if( nextActionMessageToSend != NULL ) {
+                                    delete [] nextActionMessageToSend;
+                                    nextActionMessageToSend = NULL;
+                                }
+
+                                nextActionMessageToSend =
+                                    autoSprintf( "SELF %d %d 5#",
+                                            sendX( ourLiveObject->xd ), sendY( ourLiveObject->yd ) );
+                                playerActionTargetX = ourLiveObject->xd;
+                                playerActionTargetY = ourLiveObject->yd;
+                                }
+                            }
+                        return true;
+                        }
+                    return true;
+                case IK_BP_SREMV:
+                    if( ! ourLiveObject->inMotion
+                        && ourLiveObject->clothing.backpack != NULL
+                        && ourLiveObject->clothingContained[5].size() > 0) {
+
+                        if( nextActionMessageToSend != NULL ) {
+                            delete [] nextActionMessageToSend;
+                            nextActionMessageToSend = NULL;
+                        }
+
+                        if( ourLiveObject->holdingID > 0 ) {
+                            nextActionMessageToSend =
+                                autoSprintf( "DROP %d %d 5#",
+                                        sendX( ourLiveObject->xd ), sendY( ourLiveObject->yd ) );
+                        }
+                        else {
+                            nextActionMessageToSend =
+                                autoSprintf( "SREMV %d %d 5 -1#",
+                                        sendX( ourLiveObject->xd ), sendY( ourLiveObject->yd ) );
+                        }
+
+                        playerActionTargetX = ourLiveObject->xd;
+                        playerActionTargetY = ourLiveObject->yd;
+                    }
+                    return true;
+                default:
+                    return false;
+                }
+            }
+        }
+    return false;
+    }
+
+
 void LivingLifePage::pointerDown( float inX, float inY ) {
     lastMouseX = inX;
     lastMouseY = inY;
@@ -26021,7 +26337,6 @@ void LivingLifePage::keyDown( unsigned char inASCII ) {
                 mZKeyDown = false;
                 mXKeyDown = false;
 
-                mSayField.setText( "" );
                 mSayField.focus();
                 }
             else if( mSayField.isFocused() ) {
@@ -26401,23 +26716,44 @@ void LivingLifePage::keyDown( unsigned char inASCII ) {
                 TextField::unfocusAll();
                 }
             break;
+        case 8: // backspace
+            if( mSayField.isFocused() && isShiftKeyDown() ) {
+                mSayField.setText( "" );
+                mSayField.unfocus();
+                }
+            break;
         default:
             keyHandledByCase = false;
             break;
         }
 
+    if( TextField::isAnyFocused() ) {
+        return;
+        }
+
     if( keyHandledByCase ) {
         //printf( "key handled by case %c\n", inASCII);
         sayCapture = inASCII;
         keyDownGap = 0;
+        if( interactionKeysEnabled && inASCII != interactionKeys[IK_RUN] && inASCII != 13 ) {
+            autoRun = false;
+            }
         }
     else {
         //printf( "key NOT handled by case %c\n", inASCII);
+
+        bool keyHandledByKeybind = false;
+
+        if ( interactionKeysEnabled ) {
+            keyHandledByKeybind = tryInteractionKeys( inASCII );
+            }
+
         // inspired by Awbz OneLife+
         if( ( ( openSayFieldOnTypingLower && islower( inASCII ) )
               || ( openSayFieldOnTypingUpper && isupper( inASCII ) )
             )
             && ! mSayField.isFocused()
+            && ! keyHandledByKeybind
             && ! vogMode
             && (isalpha( inASCII )
                 || (inASCII == ' ' && keyDownGap < 30 && sayCapture != 0 ))) {
@@ -26595,6 +26931,9 @@ void LivingLifePage::specialKeyDown( int inKeyCode ) {
                 }
             }
         }
+    else if( inKeyCode == MG_KEY_F1 ) {
+        mSayField.unfocus();
+        }
     }
 
 
diff --git a/gameSource/LivingLifePage.h b/gameSource/LivingLifePage.h
index ec7a267ef..edec50df7 100644
--- a/gameSource/LivingLifePage.h
+++ b/gameSource/LivingLifePage.h
@@ -996,6 +996,8 @@ class LivingLifePage : public GamePage, public ActionListener {
         void useOnOtherAt( int clickDestX, int clickDestY, int targetID = 0 );
         void killAt( int clickDestX, int clickDestY, int targetID = 0 );
 
+        bool tryInteractionKeys( char inASCII );
+
 
         LiveObject *getOurLiveObject();
         LiveObject *getLiveObject( int inID );
diff --git a/gameSource/settings/wonlife-plus/interactionKeys.ini b/gameSource/settings/wonlife-plus/interactionKeys.ini
new file mode 100644
index 000000000..ce3be4618
--- /dev/null
+++ b/gameSource/settings/wonlife-plus/interactionKeys.ini
@@ -0,0 +1,12 @@
+q step
+a autorun
+f use
+d drop
+s take/cycle from container
+v eat/self
+g feed/use on other
+k kill
+x examine
+r put/take in backpack
+e put in backpack
+w take/cycle in backpack
diff --git a/gameSource/settings/wonlife-plus/interactionKeysEnabled.ini b/gameSource/settings/wonlife-plus/interactionKeysEnabled.ini
new file mode 100644
index 000000000..573541ac9
--- /dev/null
+++ b/gameSource/settings/wonlife-plus/interactionKeysEnabled.ini
@@ -0,0 +1 @@
+0
diff --git a/gameSource/settings/wonlife-vanilla/interactionKeys.ini b/gameSource/settings/wonlife-vanilla/interactionKeys.ini
new file mode 100644
index 000000000..ce3be4618
--- /dev/null
+++ b/gameSource/settings/wonlife-vanilla/interactionKeys.ini
@@ -0,0 +1,12 @@
+q step
+a autorun
+f use
+d drop
+s take/cycle from container
+v eat/self
+g feed/use on other
+k kill
+x examine
+r put/take in backpack
+e put in backpack
+w take/cycle in backpack
diff --git a/gameSource/settings/wonlife-vanilla/interactionKeysEnabled.ini b/gameSource/settings/wonlife-vanilla/interactionKeysEnabled.ini
new file mode 100644
index 000000000..573541ac9
--- /dev/null
+++ b/gameSource/settings/wonlife-vanilla/interactionKeysEnabled.ini
@@ -0,0 +1 @@
+0
diff --git a/gameSource/settings/wonlife-wondible/interactionKeys.ini b/gameSource/settings/wonlife-wondible/interactionKeys.ini
new file mode 100644
index 000000000..ce3be4618
--- /dev/null
+++ b/gameSource/settings/wonlife-wondible/interactionKeys.ini
@@ -0,0 +1,12 @@
+q step
+a autorun
+f use
+d drop
+s take/cycle from container
+v eat/self
+g feed/use on other
+k kill
+x examine
+r put/take in backpack
+e put in backpack
+w take/cycle in backpack
diff --git a/gameSource/settings/wonlife-wondible/interactionKeysEnabled.ini b/gameSource/settings/wonlife-wondible/interactionKeysEnabled.ini
new file mode 100644
index 000000000..d00491fd7
--- /dev/null
+++ b/gameSource/settings/wonlife-wondible/interactionKeysEnabled.ini
@@ -0,0 +1 @@
+1
