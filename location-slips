diff --git a/gameSource/LivingLifePage.cpp b/gameSource/LivingLifePage.cpp
index 29a2491d2..6608e4da3 100644
--- a/gameSource/LivingLifePage.cpp
+++ b/gameSource/LivingLifePage.cpp
@@ -490,6 +490,92 @@ static SimpleVector<HomePos> oldHomePosStack;
 // used on reconnect to decide whether to delete old home positions
 static int lastPlayerID = -1;
 
+typedef struct {
+        int objectID;
+        FloatColor color;
+    } SlipColor;
+
+static FloatColor white = { 1, 1, 1, 1 };
+static FloatColor gold = { 255.0/255, 227.0/255, 50.0/255, 1 };
+static FloatColor pumpkin = { 255.0/255, 139.0/255, 0.0/255, 1 };
+static FloatColor blood = { 244.0/255, 16.0/255, 8.0/255, 1 };
+static FloatColor indigo = { 122.0/255, 126.0/255, 244.0/255, 1 };
+static FloatColor pink = { 250.0/255, 144.0/255, 146.0/255, 1 };
+static FloatColor stone = { 128.0/255, 125.0/255, 149.0/255, 1 };
+static FloatColor wood = { 146.0/255, 65.0/255, 0.0/255, 1 };
+static FloatColor sepia = { 203.0/255, 165.0/255, 114.0/255, 1 };
+static SimpleVector<SlipColor> locationSlipColors;
+
+static int locationSlipsEnabled = 1;
+
+static const char* textBaby = "baby";
+static const char* textLead = "lead";
+static const char* textSupp = "supp";
+static const char* textExpt = "expt";
+static const char* textOwner = "owner";
+static const char* textVisitor = "visitor";
+static const char* textProperty = "property";
+
+#define LOCATION_SLIP_HOME_X -41
+#define LOCATION_SLIP_MAP_X (LOCATION_SLIP_HOME_X+LOCATION_SLIP_OFFSET)
+#define LOCATION_SLIP_BOTTOM_Y -360
+#define LOCATION_SLIP_BOTTOM_TEXT 20
+
+#define LOCATION_SLIP_RIGHT_X (640+64)
+#define LOCATION_SLIP_RIGHT_Y -180
+#define LOCATION_SLIP_RIGHT_TEXT 36
+
+#define LOCATION_SLIP_OFFSET 64
+#define LOCATION_SLIP_HOVER 128
+#define LOCATION_SLIP_SHOW 50
+#define LOCATION_SLIP_ARROW 35
+
+#define LOCATION_SLIP_SHOW_DISTANCE 5
+
+void initLocationSlips() {
+    locationSlipsEnabled = SettingsManager::getIntSetting( "locationSlipsEnabled", 1 );
+
+    char *cont = SettingsManager::getSettingContents( "locationSlipColors", "" );
+
+    locationSlipColors.deleteAll();
+
+    if( strcmp( cont, "" ) == 0 ) {
+        delete [] cont;
+        SlipColor bell = { 839, gold};
+        locationSlipColors.push_back( bell );
+        SlipColor end2 = { 2486, blood};
+        locationSlipColors.push_back( end2 );
+        SlipColor end3 = { 2484, blood};
+        locationSlipColors.push_back( end3 );
+        SlipColor end4 = { 2481, blood};
+        locationSlipColors.push_back( end4 );
+        SlipColor end = { 2482, blood};
+        locationSlipColors.push_back( end );
+        SlipColor hell = { 4745, pumpkin};
+        locationSlipColors.push_back( hell );
+        return;
+        }
+
+    int numParts;
+    char **parts = split( cont, "\n", &numParts );
+    delete [] cont;
+
+    for( int i=0; i<numParts; i++ ) {
+        if( strcmp( parts[i], "" ) != 0 ) {
+
+            int objectID;
+            int r, g, b;
+            int numRead = sscanf( parts[i], "%d %d %d %d",
+                                  &objectID, &r, &g, &b );
+            if( numRead == 4 ) {
+                SlipColor color = { objectID, { (float)r/255.0f, (float)g/255.0f, (float)b/255.0f, 1 } };
+                locationSlipColors.push_back( color );
+                }
+            }
+        delete [] parts[i];
+        }
+    delete [] parts;
+    }
 
 
 static void processHomePosStack() {
@@ -568,6 +654,32 @@ static void removeHomeLocation( int inX, int inY ) {
     }
 
 
+void LivingLifePage::removeLocationSlip( int inX, int inY ) {
+    for( int i=0; i<mLocationSlips.size(); i++ ) {
+        GridPos p = mLocationSlips.getElementDirect( i ).pos;
+
+        if( p.x == inX && p.y == inY ) {
+            mLocationSlips.deleteElement( i );
+            break;
+            }
+        }
+    }
+
+
+void LivingLifePage::setLocationSlipExpiration( int seconds ) {
+    for( int i=0; i<mLocationSlips.size(); i++ ) {
+        LocationSlip *r = mLocationSlips.getElement( i );
+
+        if( r != NULL && r->temporary &&
+            r->temporaryExpireETA == 0 ) {
+            r->temporaryExpireETA =
+                game_getCurrentTime() + seconds;
+            r->distanceExpireETA = game_getCurrentTime() + LOCATION_SLIP_SHOW_DISTANCE;
+            }
+        }
+    }
+
+
 static void removeAllTempHomeLocations() {
     for( int i=0; i<homePosStack.size(); i++ ) {
         if( homePosStack.getElementDirect( i ).temporary ) {
@@ -674,6 +786,28 @@ static char doesNewTempLocationTrumpPrevious( const char *inPersonKey ) {
     }
 
 
+void LivingLifePage::addLocationSlip( int inX, int inY ) {
+    removeLocationSlip( inX, inY );
+    GridPos newPos = { inX, inY };
+    LocationSlip p;
+    p.pos = newPos;
+    p.ancient = false;
+    p.temporary = false;
+    p.labeled = true;
+    p.showDistance = false;
+    p.tempPerson = false;
+    p.temporaryExpireETA = 0;
+    p.distanceExpireETA = 0;
+    p.creationTime = game_getCurrentTime();
+    p.pointerBounce = 0;
+    p.pointerFade = 0;
+    p.slipColor = white;
+    doublePair offset = {LOCATION_SLIP_HOME_X, LOCATION_SLIP_BOTTOM_Y};
+    p.posOffset = p.targetOffset = p.hideOffset = offset;
+
+    mLocationSlips.push_front( p );
+    }
+
 
 static void addTempHomeLocation( int inX, int inY, 
                                  char inPerson, int inPersonID,
@@ -729,6 +863,76 @@ static void addTempHomeLocation( int inX, int inY,
     }
 
 
+void LivingLifePage::addTempLocationSlip( int inX, int inY,
+                                          char inPerson, int inPersonID,
+                                          const char *inPersonKey,
+                                          int inAge ) {
+    removeLocationSlip( inX, inY );
+    GridPos newPos = { inX, inY };
+    LocationSlip p;
+    p.pos = newPos;
+    p.ancient = false;
+    p.temporary = true;
+    p.labeled = false;
+    p.showDistance = false;
+    // no expiration for now
+    // until we drop the map
+    p.temporaryExpireETA = 0;
+    p.distanceExpireETA = 0;
+    doublePair offset = {LOCATION_SLIP_MAP_X, LOCATION_SLIP_BOTTOM_Y};
+    p.posOffset = p.targetOffset = p.hideOffset = offset;
+    p.creationTime = game_getCurrentTime() - inAge;
+    p.pointerBounce = 0;
+    p.pointerFade = 0;
+    p.slipColor = indigo;
+
+    p.tempPerson = inPerson;
+
+    p.personID = -1;
+    
+    p.tempPersonKey = NULL;
+
+    if( inPerson ) {
+        LiveObject *ourLiveObject = getOurLiveObject();
+        // person pointer does not depend on held map
+        if( inPersonKey == textExpt ) {
+            // 3 minutes total when searching for an expert
+            p.temporaryExpireETA = game_getCurrentTime() + 180;
+            }
+        else {
+            p.temporaryExpireETA = game_getCurrentTime() + 60;
+            }
+        p.distanceExpireETA = game_getCurrentTime() + LOCATION_SLIP_SHOW_DISTANCE;
+        p.personID = inPersonID;
+        if( inPersonKey == textLead || inPersonKey == textSupp ) {
+            p.tempPersonKey = inPersonKey;
+            if( ourLiveObject ) {
+                p.slipColor = ourLiveObject->badgeColor;
+                }
+            }
+        else {
+            LiveObject* targetPerson = getLiveObject( inPersonID );
+            if( targetPerson == NULL ) targetPerson = ourLiveObject;
+            if( targetPerson ) {
+                ObjectRecord *displayObj = getObject( targetPerson->displayID );
+                double age = 0;
+
+                FloatRGB color =
+                    displayObj->spriteColor[ getBodyIndex( displayObj, age ) ];
+                p.slipColor.r = color.r;
+                p.slipColor.g = color.g;
+                p.slipColor.b = color.b;
+                }
+            else {
+                p.slipColor = pink;
+                }
+            }
+        }
+
+    mLocationSlips.push_front( p );
+    }
+
+
 
 static void updatePersonHomeLocation( int inPersonID, int inX, int inY ) {
     for( int i=0; i<homePosStack.size(); i++ ) {
@@ -744,6 +948,41 @@ static void updatePersonHomeLocation( int inPersonID, int inX, int inY ) {
 
 char isAncientHomePosHell = false;
 
+void LivingLifePage::updateLocationSlip( LocationSlip* locationSlip, int inX, int inY ) {
+    if( locationSlip->pointerFade > 0 && (locationSlip->pos.x != inX || locationSlip->pos.y != inY) ) {
+        doublePair pos;
+        pos.x = locationSlip->pos.x;
+        pos.y = locationSlip->pos.y;
+        doublePair targetPos = mult( pos, CELL_D);
+        // move up
+        targetPos.y += 64;
+
+        if( locationSlip->tempPerson ) targetPos.y += CELL_D;
+
+        OldHintArrow h = { targetPos,
+                           locationSlip->pointerBounce,
+                           locationSlip->pointerFade };
+        mOldHintArrows.push_back( h );
+        locationSlip->pointerFade = 0;
+        locationSlip->pointerBounce = 0;
+        }
+    locationSlip->pos.x = inX;
+    locationSlip->pos.y = inY;
+    }
+
+
+void LivingLifePage::updatePersonLocationSlip( int inPersonID, int inX, int inY ) {
+    for( int i=0; i<mLocationSlips.size(); i++ ) {
+        LocationSlip *p = mLocationSlips.getElement( i );
+        
+        if( p->tempPerson && p->personID == inPersonID ) {
+            updateLocationSlip( p, inX, inY );
+            }
+        }
+    }
+
+
+
 static void addAncientHomeLocation( int inX, int inY ) {
     removeHomeLocation( inX, inY );
 
@@ -765,11 +1004,90 @@ static void addAncientHomeLocation( int inX, int inY ) {
     homePosStack.push_front( p );
     }
 
+void LivingLifePage::addPropertyLocationSlip( int inX, int inY ) {
+    removeLocationSlip( inX, inY );
+    GridPos newPos = { inX, inY };
+    LocationSlip p;
+    p.pos = newPos;
+    p.ancient = true;
+    p.temporary = false;
+    p.labeled = false;
+    p.showDistance = false;
+    p.tempPerson = false;
+    doublePair offset = {LOCATION_SLIP_RIGHT_X, LOCATION_SLIP_RIGHT_Y};
+    p.posOffset = p.targetOffset = p.hideOffset = offset;
+    p.pointerBounce = 0;
+    p.pointerFade = 0;
+    p.slipColor = wood;
+    p.distanceExpireETA = game_getCurrentTime() + LOCATION_SLIP_SHOW_DISTANCE;
+    p.creationTime = game_getCurrentTime();
+    mLocationSlips.push_front( p );
+    }
+
+void LivingLifePage::addAncientLocationSlip( int inX, int inY, int monumentID ) {
+    removeLocationSlip( inX, inY );
+    GridPos newPos = { inX, inY };
+    LocationSlip p;
+    p.pos = newPos;
+    p.ancient = true;
+    p.temporary = false;
+    p.labeled = false;
+    p.showDistance = false;
+    p.tempPerson = false;
+    doublePair offset = {LOCATION_SLIP_RIGHT_X, LOCATION_SLIP_RIGHT_Y};
+    p.posOffset = p.targetOffset = p.hideOffset = offset;
+    p.pointerBounce = 0;
+    p.pointerFade = 0;
+    p.slipColor = gold;
+    if( isAncientHomePosHell ) {
+      p.slipColor = pumpkin;
+    }
+    p.distanceExpireETA = game_getCurrentTime() + LOCATION_SLIP_SHOW_DISTANCE;
+    p.creationTime = game_getCurrentTime();
+    for( int i = 0; i < locationSlipColors.size();i++ ) {
+        SlipColor color = locationSlipColors.getElementDirect(i);
+        if( color.objectID == monumentID ) {
+            p.slipColor = color.color;
+            break;
+            }
+        }
+
+    mLocationSlips.push_front( p );
+    }
+
 
+void LivingLifePage::addHomelandLocationSlip( int inX, int inY, const char* inFamilyName ) {
+    removeLocationSlip( inX, inY );
+    GridPos newPos = { inX, inY };
+    LocationSlip p;
+    p.pos = newPos;
+    p.ancient = true;
+    p.temporary = false;
+    p.labeled = false;
+    p.showDistance = false;
+    p.tempPerson = false;
+    p.pointerBounce = 0;
+    p.pointerFade = 0;
+    doublePair offset = {LOCATION_SLIP_RIGHT_X, LOCATION_SLIP_RIGHT_Y};
+    p.posOffset = p.targetOffset = p.hideOffset = offset;
+    p.distanceExpireETA = game_getCurrentTime() + LOCATION_SLIP_SHOW_DISTANCE;
+    if( inFamilyName ) {
+        p.creationTime = game_getCurrentTime();
+        }
+    else {
+        p.creationTime = game_getCurrentTime() - 60 * 60;
+        }
+    p.slipColor = stone;
+
+    mLocationSlips.push_front( p );
+    }
 
 
 
 
+static int getArrowIndex( doublePair vector );
+
+
 // returns if -1 no home needs to be shown (home unknown)
 // otherwise, returns 0..7 index of arrow
 static int getHomeDir( doublePair inCurrentPlayerPos, 
@@ -830,8 +1148,13 @@ static int getHomeDir( doublePair inCurrentPlayerPos,
             return -1;
             }
         }
-    
-    
+    return getArrowIndex( vector );
+    }
+
+
+
+// returns 0..7 index of arrow
+static int getArrowIndex( doublePair vector ) {
     double a = angle( vector );
 
     // north is 0
@@ -3133,6 +3456,8 @@ LivingLifePage::LivingLifePage()
 
     initBecomesFood();
 
+    initLocationSlips();
+
     initLiveTriggers();
 
     initNames();
@@ -3199,6 +3524,8 @@ LivingLifePage::LivingLifePage()
     mHomeSlipShowDelta[1] = 68;
     
 
+    mLocationSlips.deleteAll();
+
 
     for( int i=0; i<NUM_YUM_SLIPS; i++ ) {    
         mYumSlipHideOffset[i].x = -600;
@@ -7075,6 +7402,271 @@ void LivingLifePage::drawHomeSlip( doublePair inSlipPos, int inIndex ) {
 
 
 
+void LivingLifePage::drawLocationSlip( int inIndex ) {
+    LocationSlip* locationSlip = mLocationSlips.getElement(inIndex);
+    if( locationSlip == NULL ) return;
+
+    if( equal( locationSlip->posOffset, locationSlip->hideOffset ) ) return;
+
+    doublePair slipPos = add( locationSlip->posOffset, lastScreenViewCenter );
+
+    LiveObject *ourLiveObject = getOurLiveObject();
+    if( ourLiveObject == NULL ) return;
+
+    double age = (game_getCurrentTime() - locationSlip->creationTime);
+    float f = (age / (age + 60*60)) * 0.5;
+    FloatColor color = locationSlip->slipColor;
+    setDrawColor(
+        color.r + (sepia.r - color.r) * f,
+        color.g + (sepia.g - color.g) * f,
+        color.b + (sepia.b - color.b) * f,
+        1 );
+
+    char labeled = locationSlip->labeled;
+    char rightSide = locationSlip->ancient;
+
+    if( labeled ) {
+        drawSprite( mHomeSlipSprite, slipPos, 1.0, 0.0 );
+        }
+    else if ( rightSide ) {
+        drawSprite( mHomeSlip2Sprite, slipPos, 1.0, 0.75 );
+        }
+    else {
+        drawSprite( mHomeSlip2Sprite, slipPos, 1.0, 0.0 );
+        }
+
+    GridPos p = locationSlip->pos;
+    doublePair targetPos = { (double)p.x, (double)p.y };
+    doublePair vector = sub( targetPos, ourLiveObject->currentPos );
+
+    doublePair arrowPos = slipPos;
+
+    if ( rightSide ) {
+        arrowPos.x -= LOCATION_SLIP_ARROW;
+        }
+    else {
+        arrowPos.y += LOCATION_SLIP_ARROW;
+        }
+
+    int arrowIndex = getArrowIndex( vector );
+
+    if( arrowIndex == -1 ||
+        ! locationSlip->arrowStates[arrowIndex].solid ) {
+        // solid change
+
+        // fade any solid
+
+        int foundSolid = -1;
+        for( int i=0; i<NUM_HOME_ARROWS; i++ ) {
+            if( locationSlip->arrowStates[i].solid ) {
+                locationSlip->arrowStates[i].solid = false;
+                foundSolid = i;
+                }
+            }
+        if( foundSolid != -1 ) {
+            for( int i=0; i<NUM_HOME_ARROWS; i++ ) {
+                if( i != foundSolid ) {
+                    locationSlip->arrowStates[i].fade -= 0.0625;
+                    if( locationSlip->arrowStates[i].fade < 0 ) {
+                        locationSlip->arrowStates[i].fade = 0;
+                        }
+                    }
+                }
+            }
+        }
+
+    if( arrowIndex != -1 ) {
+        locationSlip->arrowStates[arrowIndex].solid = true;
+        locationSlip->arrowStates[arrowIndex].fade = 1.0;
+        }
+
+    toggleMultiplicativeBlend( true );
+
+    toggleAdditiveTextureColoring( true );
+
+    for( int i=0; i<NUM_HOME_ARROWS; i++ ) {
+        HomeArrow a = locationSlip->arrowStates[i];
+
+        if( ! a.solid ) {
+
+            float v = 1.0 - a.fade;
+            setDrawColor( v, v, v, 1 );
+            drawSprite( mHomeArrowErasedSprites[i], arrowPos );
+            }
+        }
+
+
+
+
+    if( arrowIndex != -1 ) {
+
+
+        float v = (age / (age + 60*60)) * 0.5;
+        setDrawColor( v, v, v, 1 );
+
+        drawSprite( mHomeArrowSprites[arrowIndex], arrowPos );
+        }
+
+    toggleAdditiveTextureColoring( false );
+    toggleMultiplicativeBlend( false );
+
+    char drawTopAsErased = true;
+    if ( rightSide ) {
+        arrowPos.x += LOCATION_SLIP_ARROW/2;
+        }
+    else {
+        arrowPos.y -= LOCATION_SLIP_ARROW/2;
+        }
+
+    if ( labeled ) {
+        arrowPos.y -= LOCATION_SLIP_BOTTOM_TEXT;
+        }
+    else if ( locationSlip->tempPerson && locationSlip->tempPersonKey ) {
+        if ( rightSide ) {
+            arrowPos.x += LOCATION_SLIP_RIGHT_TEXT/2;
+            }
+        else {
+            arrowPos.y -= LOCATION_SLIP_BOTTOM_TEXT/2;
+            }
+
+        setDrawColor( 0, 0, 0, 1 );
+        pencilFont->drawString( translate( locationSlip->tempPersonKey ), 
+                                arrowPos, alignCenter );
+
+        if ( rightSide ) {
+            arrowPos.x += LOCATION_SLIP_RIGHT_TEXT/2;
+            }
+        else {
+            arrowPos.y -= LOCATION_SLIP_BOTTOM_TEXT/2;
+            }
+        }
+
+    double dist = length( vector );
+
+    if( locationSlip->showDistance ) {
+        if ( rightSide ) {
+            arrowPos.x += LOCATION_SLIP_RIGHT_TEXT/2;
+            }
+        else {
+            arrowPos.y -= LOCATION_SLIP_BOTTOM_TEXT/2;
+            }
+        drawTopAsErased = false;
+
+        setDrawColor( 0, 0, 0, 1 );
+
+        char *distString = NULL;
+
+        if( dist < 100 ) {
+            distString = autoSprintf( "%.0f", dist );
+            }
+
+        double thousands = dist / 1000;
+        if( distString == NULL && thousands < 1000 ) {
+            if( thousands < 10 ) {
+                distString = autoSprintf( "%.1fK", thousands );
+                }
+            else {
+                distString = autoSprintf( "%.0fK",
+                                          thousands );
+                }
+            }
+
+        double millions = dist / 1000000;
+        if( distString == NULL && millions < 1000 ) {
+            if( millions < 10 ) {
+                distString = autoSprintf( "%.1fM", millions );
+                }
+            else {
+                distString = autoSprintf( "%.0fM", millions );
+                }
+            }
+
+        if( distString == NULL ) {
+            double billions = dist / 1000000000;
+            distString = autoSprintf( "%.1fG", billions );
+            }
+
+
+        pencilFont->drawString( distString, arrowPos, alignCenter );
+
+        char alreadyOld = false;
+
+        for( int i=0; i<locationSlip->previousDistStrings.size(); i++ ) {
+            char *oldString =
+                locationSlip->previousDistStrings.getElementDirect( i );
+
+            if( strcmp( oldString, distString ) == 0 ) {
+                // hit
+                alreadyOld = true;
+                // move to top
+                locationSlip->previousDistStrings.deleteElement( i );
+                locationSlip->previousDistStrings.push_back( oldString );
+
+                locationSlip->previousDistFades.deleteElement( i );
+                locationSlip->previousDistFades.push_back( 1.0f );
+                break;
+                }
+            }
+
+        if( ! alreadyOld ) {
+            // put new one top
+            locationSlip->previousDistStrings.push_back( distString );
+            locationSlip->previousDistFades.push_back( 1.0f );
+
+            // fade old ones
+            for( int i=0; i<locationSlip->previousDistFades.size() - 1;
+                 i++ ) {
+                float fade =
+                    locationSlip->previousDistFades.getElementDirect( i );
+
+                if( fade > 0.5 ) {
+                    fade -= 0.20;
+                    }
+                else {
+                    fade -= 0.1;
+                    }
+
+                *( locationSlip->previousDistFades.getElement( i ) ) =
+                    fade;
+
+                if( fade <= 0 ) {
+                    locationSlip->previousDistFades.deleteElement( i );
+                    locationSlip->previousDistStrings.
+                        deallocateStringElement( i );
+                    i--;
+                    }
+                }
+            }
+        else {
+            delete [] distString;
+            }
+        }
+
+    int numPrevious = locationSlip->previousDistStrings.size();
+
+    if( numPrevious > 1 ||
+        ( numPrevious == 1 && drawTopAsErased ) ) {
+
+        int limit = locationSlip->previousDistStrings.size() - 1;
+
+        if( drawTopAsErased ) {
+            limit += 1;
+            }
+        for( int i=0; i<limit; i++ ) {
+            float fade =
+                locationSlip->previousDistFades.getElementDirect( i );
+            char *string =
+                locationSlip->previousDistStrings.getElementDirect( i );
+
+            setDrawColor( 0, 0, 0, fade * pencilErasedFontExtraFade );
+            pencilErasedFont->drawString(
+                string, arrowPos, alignCenter );
+            }
+        }
+    }
+
+
+
 typedef struct DrawOrderRecord {
         char person;
         // if person
@@ -9005,6 +9597,32 @@ void LivingLifePage::draw( doublePair inViewCenter,
         }
     
 
+    if( mHintArrowSprite && ! takingPhoto ) {
+        for( int j=0; j<mLocationSlips.size(); j++ ) {
+            LocationSlip* locationSlip = mLocationSlips.getElement(j);
+            if( locationSlip->pointerFade > 0.0 ) {
+                // draw pointer to closest location slip
+
+                doublePair pos;
+                pos.x = locationSlip->pos.x;
+                pos.y = locationSlip->pos.y;
+                doublePair targetPos = mult( pos, CELL_D);
+
+                // move up
+                targetPos.y += 64;
+
+                if( locationSlip->tempPerson ) targetPos.y += CELL_D;
+
+                targetPos.y += 16 * cos( locationSlip->pointerBounce );
+
+                setDrawColor( 1, 1, 1, locationSlip->pointerFade );
+
+                drawSprite( mHintArrowSprite, targetPos );
+                }
+            }
+        }
+
+
     char pointerDrawn[2] = { false, false };
 
     if( mHintArrowSprite )
@@ -10295,6 +10913,12 @@ void LivingLifePage::draw( doublePair inViewCenter,
     
 
 
+    if( locationSlipsEnabled ) {
+        for( int j=0; j<mLocationSlips.size(); j++ ) {
+            drawLocationSlip( j );
+            }
+        }
+    else {
     for( int j=0; j<2; j++ ) {
         doublePair slipPos = add( mHomeSlipPosOffset[j], lastScreenViewCenter );
         
@@ -10302,6 +10926,7 @@ void LivingLifePage::draw( doublePair inViewCenter,
             drawHomeSlip( slipPos, j );
             }
         }
+        }
 
 
 
@@ -14280,6 +14905,109 @@ void LivingLifePage::step() {
                 mHomeSlipPosTargetOffset[j].y = mHomeSlipHideOffset[j].y;
                 }
             }
+
+        int homeSlips = 0;
+        double homeOffset = 0;
+        double mapOffset = 0;
+        double rightOffset = 0;
+        double deltaRate = 6 * frameRateFactor / 60.0;
+        doublePair worldMousePos = { lastMouseX, lastMouseY };
+        doublePair mousePos = sub( worldMousePos, lastScreenViewCenter );
+        for( int j=0; j<mLocationSlips.size(); j++ ) {
+            LocationSlip* locationSlip = mLocationSlips.getElement(j);
+            if( locationSlip == NULL ) continue;
+            char home =
+                ! locationSlip->temporary &&
+                ! locationSlip->ancient;
+            if ( home ) homeSlips++;
+            char tempLabel =
+                locationSlip->tempPerson &&
+                locationSlip->tempPersonKey;
+            locationSlip->labeled = home && homeSlips == 1;
+            char expired =
+                locationSlip->temporary &&
+                locationSlip->temporaryExpireETA != 0 &&
+                locationSlip->temporaryExpireETA < game_getCurrentTime();
+            char hidden =
+                expired ||
+                ( home && homeSlips > 7 );
+            GridPos p = locationSlip->pos;
+            doublePair targetPos = { (double)p.x, (double)p.y };
+            doublePair vector = sub( targetPos, ourObject->currentPos );
+            double dist = length( vector );
+            locationSlip->showDistance = dist > 1000 ||
+                game_getCurrentTime() < locationSlip->distanceExpireETA ||
+                (locationSlip->temporary && locationSlip->distanceExpireETA == 0);
+            if ( locationSlip->ancient ) {
+                locationSlip->targetOffset.x = locationSlip->hideOffset.x = LOCATION_SLIP_RIGHT_X;
+                locationSlip->targetOffset.y = locationSlip->hideOffset.y = LOCATION_SLIP_RIGHT_Y + rightOffset;
+                rightOffset += LOCATION_SLIP_OFFSET;
+                }
+            else if ( locationSlip->temporary ) {
+                locationSlip->targetOffset.y = locationSlip->hideOffset.y = LOCATION_SLIP_BOTTOM_Y;
+                locationSlip->targetOffset.x = locationSlip->hideOffset.x = LOCATION_SLIP_MAP_X + mapOffset;
+                mapOffset += LOCATION_SLIP_OFFSET;
+                }
+            else {
+                locationSlip->targetOffset.y = locationSlip->hideOffset.y = LOCATION_SLIP_BOTTOM_Y;
+                locationSlip->targetOffset.x = locationSlip->hideOffset.x = LOCATION_SLIP_HOME_X - homeOffset;
+                homeOffset += LOCATION_SLIP_OFFSET;
+                }
+
+            if( locationSlip->ancient &&
+                locationSlip->targetOffset.x - LOCATION_SLIP_HOVER < mousePos.x &&
+                locationSlip->targetOffset.y - LOCATION_SLIP_OFFSET/2 < mousePos.y &&
+                mousePos.y < locationSlip->targetOffset.y + LOCATION_SLIP_OFFSET/2 ) {
+                locationSlip->showDistance = true;
+                }
+            else if( mousePos.y < locationSlip->targetOffset.y + LOCATION_SLIP_HOVER &&
+                locationSlip->targetOffset.x - LOCATION_SLIP_OFFSET/2 < mousePos.x &&
+                mousePos.x < locationSlip->targetOffset.x + LOCATION_SLIP_OFFSET/2 ) {
+                locationSlip->showDistance = true;
+                }
+
+            if( ! apocalypseInProgress && ! hidden && (dist > 5 || locationSlip->showDistance) ) {
+
+                if (locationSlip->ancient) {
+                    locationSlip->targetOffset.x =
+                        locationSlip->hideOffset.x - LOCATION_SLIP_SHOW;
+
+                    if( locationSlip->showDistance ) {
+                        locationSlip->targetOffset.x -= LOCATION_SLIP_RIGHT_TEXT;
+                        }
+                    }
+                else {
+                    locationSlip->targetOffset.y =
+                        locationSlip->hideOffset.y + LOCATION_SLIP_SHOW;
+
+                    if( locationSlip->labeled || tempLabel ) {
+                        locationSlip->targetOffset.y += LOCATION_SLIP_BOTTOM_TEXT;
+                        }
+
+                    if( locationSlip->showDistance ) {
+                        locationSlip->targetOffset.y += LOCATION_SLIP_BOTTOM_TEXT;
+                        }
+                    }
+                }
+            else {
+                locationSlip->targetOffset.y = locationSlip->hideOffset.y;
+                locationSlip->targetOffset.x = locationSlip->hideOffset.x;
+                }
+            if( ! apocalypseInProgress && ! hidden && dist < 5 &&
+                ( locationSlip->temporary || locationSlip->showDistance ) ) {
+                locationSlip->pointerBounce += deltaRate;
+                if( locationSlip->pointerFade < 1 ) {
+                    locationSlip->pointerFade += deltaRate;
+                    if( locationSlip->pointerFade > 1 ) {
+                        locationSlip->pointerFade = 1;
+                        }
+                    }
+                }
+            else {
+                locationSlip->pointerBounce = 0;
+                locationSlip->pointerFade = 0;
+                }
+            }
         
         int cm = ourObject->currentMouseOverClothingIndex;
         if( cm != -1 ) {
@@ -14392,6 +15120,66 @@ void LivingLifePage::step() {
             }        
         }
     
+
+
+    // update location slip positions
+    for( int j=mLocationSlips.size()-1;j>=0; j-- ) {
+        LocationSlip* locationSlip = mLocationSlips.getElement( j );
+        if( locationSlip == NULL ) continue;
+        if( ! equal( locationSlip->posOffset, locationSlip->targetOffset ) ) {
+            doublePair delta =
+                sub( locationSlip->targetOffset, locationSlip->posOffset );
+
+            double d = distance( locationSlip->targetOffset,
+                                 locationSlip->posOffset );
+
+
+            if( d <= 1 ) {
+                locationSlip->posOffset = locationSlip->targetOffset;
+                if( equal( locationSlip->targetOffset, locationSlip->hideOffset ) ) {
+                    // fully hidden
+                    if (locationSlip->temporary &&
+                        locationSlip->temporaryExpireETA != 0 &&
+                        locationSlip->temporaryExpireETA < game_getCurrentTime() ) {
+                        updateLocationSlip( locationSlip, locationSlip->pos.x + 1, 0 );
+                        mLocationSlips.deleteElement( j );
+                        }
+                    else {
+                        // clear all arrow states
+                        for( int i=0; i<NUM_HOME_ARROWS; i++ ) {
+                            locationSlip->arrowStates[i].solid = false;
+                            locationSlip->arrowStates[i].fade = 0;
+                            }
+
+                        // clear old dist strings too
+                        locationSlip->previousDistStrings.deallocateStringElements();
+                        locationSlip->previousDistFades.deleteAll();
+                        }
+                    }
+                }
+            else {
+                int speed = frameRateFactor * 4;
+
+                if( d < 8 ) {
+                    speed = lrint( frameRateFactor * d / 2 );
+                    }
+
+                if( speed > d ) {
+                    speed = floor( d );
+                    }
+
+                if( speed < 1 ) {
+                    speed = 1;
+                    }
+
+                doublePair dir = normalize( delta );
+
+                locationSlip->posOffset = 
+                    add( locationSlip->posOffset,
+                         mult( dir, speed ) );
+                }
+            }
+        }
     
     
 
@@ -15433,6 +16221,7 @@ void LivingLifePage::step() {
                     if( strcmp( famName, "0" ) != 0 ) {
                         h->familyName = stringDuplicate( famName );
                         }
+                    addHomelandLocationSlip( x, y, h->familyName );
                     }
                 else {
                     char *newFamName = NULL;
@@ -15441,6 +16230,7 @@ void LivingLifePage::step() {
                         }
                     Homeland h = { x, y, newFamName };
                     homelands.push_back( h );
+                    addHomelandLocationSlip( x, y, h.familyName );
                     }
                 }
             }
@@ -15707,6 +16497,7 @@ void LivingLifePage::step() {
             apocalypseDisplayProgress = 0;
             apocalypseInProgress = false;
             homePosStack.deleteAll();
+            mLocationSlips.deleteAll();
 
             clearToolLearnedStatus();
 
@@ -15736,6 +16527,7 @@ void LivingLifePage::step() {
                     if( d > 32 ) {
                         addAncientHomeLocation( posX, posY );
                         isAncientHomePosHell = false;
+                        addAncientLocationSlip( posX, posY, monumentID );
                         
                         // play sound in distance
                         ObjectRecord *monObj = getObject( monumentID );
@@ -16091,11 +16883,16 @@ void LivingLifePage::step() {
                     }
 
                 o->ownerList->deleteAll();
+                removeLocationSlip( x, y );
                 for( int t=3; t < tokens->size(); t++ ) {
                     int ownerID = 0;
                     sscanf( tokens->getElementDirect( t ), "%d", &ownerID );
                     if( ownerID > 0 ) {
                         o->ownerList->push_back( ownerID );
+
+                        if( ownerID == ourID ) {
+                            addPropertyLocationSlip( x, y );
+                            }
                         }
                     }
                 }
@@ -16238,6 +17035,7 @@ void LivingLifePage::step() {
 
                         // home markers invalid now
                         homePosStack.deleteAll();
+                        mLocationSlips.deleteAll();
                         }
                     }
                 }            
@@ -16809,6 +17607,7 @@ void LivingLifePage::step() {
                         printf( "Found starting home marker at %d,%d\n",
                                 closestX, closestY );
                         addHomeLocation( closestX, closestY );
+                        addLocationSlip( closestX, closestY );
                         }
                     }
                 
@@ -17422,11 +18221,13 @@ void LivingLifePage::step() {
                                     getObject( newID )->homeMarker ) {
                                     
                                     addHomeLocation( x, y );
+                                    addLocationSlip( x, y );
                                     addedOrRemoved = true;
                                     }
                                 else if( old > 0 &&
                                          getObject( old )->homeMarker ) {
                                     removeHomeLocation( x, y );
+                                    removeLocationSlip( x, y );
                                     addedOrRemoved = true;
                                     }
                                 
@@ -17462,6 +18263,8 @@ void LivingLifePage::step() {
                                                     
                                                     removeHomeLocation(
                                                         rx, ry );
+                                                    removeLocationSlip(
+                                                        rx, ry );
                                                     }
                                                 }
                                             }
@@ -17470,6 +18273,18 @@ void LivingLifePage::step() {
                                 }
                             }
                         
+                        // new tile is not owned, clear any owner info
+                        if ( newID <= 0 || ! getObject ( newID )->isOwned ) {
+                            for( int g=0; g<mOwnerInfo.size(); g++ ) {
+                                OwnerInfo *gI = mOwnerInfo.getElement( g );
+                                if( gI->worldPos.x == x &&
+                                    gI->worldPos.y == y ) {
+
+                                    gI->ownerList->deleteAll();
+                                    removeLocationSlip( x, y );
+                                    }
+                                }
+                            }
 
 
                         if( old != newID && 
@@ -18169,6 +18984,8 @@ void LivingLifePage::step() {
                                 r->temporaryExpireETA = 
                                     game_getCurrentTime() + 60;
                                 }
+
+                            setLocationSlipExpiration( 60 );
                             }
                         
                         
@@ -19410,6 +20227,10 @@ void LivingLifePage::step() {
                                 existing->id,
                                 lrint( existing->currentPos.x ),
                                 lrint( existing->currentPos.y ) );
+                            updatePersonLocationSlip( 
+                                existing->id,
+                                lrint( existing->currentPos.x ),
+                                lrint( existing->currentPos.y ) );
                             }
                         if( existing->holdingID < 0 ) {
                             int babyID = - existing->holdingID;
@@ -19418,6 +20239,10 @@ void LivingLifePage::step() {
                                 babyID,
                                 lrint( existing->currentPos.x ),
                                 lrint( existing->currentPos.y ) );
+                            updatePersonLocationSlip( 
+                                babyID,
+                                lrint( existing->currentPos.x ),
+                                lrint( existing->currentPos.y ) );
                             }
                         
 
@@ -20110,6 +20935,17 @@ void LivingLifePage::step() {
                     oldHomePosStack.deleteAll();
                     }
                 homePosStack.push_back_other( &oldHomePosStack );
+                for( int i=0; i<homePosStack.size(); i++ ) {
+                    HomePos p = homePosStack.getElementDirect( i );
+                    if( p.temporary ) {
+                        }
+                    else if( p.ancient ) {
+                        addAncientLocationSlip( p.pos.x, p.pos.y, -1 );
+                        }
+                    else {
+                        addLocationSlip( p.pos.x, p.pos.y );
+                        }
+                    }
 
                 lastPlayerID = ourID;
 
@@ -20258,6 +21094,10 @@ void LivingLifePage::step() {
                                     existing->id,
                                     lrint( existing->currentPos.x ),
                                     lrint( existing->currentPos.y ) );
+                                updatePersonLocationSlip( 
+                                    existing->id,
+                                    lrint( existing->currentPos.x ),
+                                    lrint( existing->currentPos.y ) );
                                 }
                             if( existing->holdingID < 0 ) {
                                 int babyID = - existing->holdingID;
@@ -20266,6 +21106,10 @@ void LivingLifePage::step() {
                                     babyID,
                                     lrint( existing->currentPos.x ),
                                     lrint( existing->currentPos.y ) );
+                                updatePersonLocationSlip( 
+                                    babyID,
+                                    lrint( existing->currentPos.x ),
+                                    lrint( existing->currentPos.y ) );
                                 }
 
 
@@ -20824,10 +21668,7 @@ void LivingLifePage::step() {
 
                             if( firstSpace != NULL ) {
                                 
-                                if( existing->currentSpeech != NULL ) {
-                                    delete [] existing->currentSpeech;
-                                    existing->currentSpeech = NULL;
-                                    }
+                                char* previousSpeech = existing->currentSpeech;
                                 
                                 existing->currentSpeech = 
                                     stringDuplicate( &( firstSpace[1] ) );
@@ -20935,7 +21776,7 @@ void LivingLifePage::step() {
                                                     " *baby %d", &personID );
 
                                             babyPos[0] = '\0';
-                                            personKey = "baby";
+                                            personKey = textBaby;
                                             }
 
 
@@ -20951,7 +21792,7 @@ void LivingLifePage::step() {
                                                     " *leader %d", &personID );
 
                                                 leaderPos[0] = '\0';
-                                                personKey = "lead";
+                                                personKey = textLead;
                                                 }
                                             }
                                         
@@ -20971,7 +21812,7 @@ void LivingLifePage::step() {
                                                         &personID );
 
                                                 follPos[0] = '\0';
-                                                personKey = "supp";
+                                                personKey = textSupp;
                                                 }
                                             }
                                         
@@ -20990,7 +21831,7 @@ void LivingLifePage::step() {
                                                         &personID );
 
                                                 expertPos[0] = '\0';
-                                                personKey = "expt";
+                                                personKey = textExpt;
                                                 }
                                             }
                                         
@@ -21007,7 +21848,7 @@ void LivingLifePage::step() {
                                                         &personID );
 
                                                 ownerPos[0] = '\0';
-                                                personKey = "owner";
+                                                personKey = textOwner;
                                                 }
                                             }
 
@@ -21025,7 +21866,7 @@ void LivingLifePage::step() {
                                                         &personID );
 
                                                 visitorPos[0] = '\0';
-                                                personKey = "visitor";
+                                                personKey = textVisitor;
                                                 }
                                             }
                                         
@@ -21043,7 +21884,7 @@ void LivingLifePage::step() {
                                                 personID = 0;
 
                                                 propPos[0] = '\0';
-                                                personKey = "property";
+                                                personKey = textProperty;
                                                 }
                                             }
 
@@ -21060,6 +21901,20 @@ void LivingLifePage::step() {
                                                                  personID,
                                                                  personO,
                                                                  personKey );
+                                            if( personKey == textExpt && personID == 0 ) {
+                                                addHomelandLocationSlip( mapX, mapY, personKey );
+                                                }
+                                            else if( personKey == textProperty ) {
+                                                person = false; // allow the text name to show
+                                                addPropertyLocationSlip( mapX, mapY );
+                                                }
+                                            else {
+                                                addTempLocationSlip( mapX, mapY,
+                                                                     person,
+                                                                     personID,
+                                                                     personKey,
+                                                                     mapAge );
+                                                }
                                             }
 
                                         if( personID != -1 && baby) {
@@ -21144,6 +21999,14 @@ void LivingLifePage::step() {
                                             existing->currentSpeech =
                                                 newSpeech;
                                             }
+
+                                        if( locationSlipsEnabled && person ) {
+                                            if( existing->currentSpeech != NULL ) {
+                                                delete [] existing->currentSpeech;
+                                                }
+                                            existing->currentSpeech = previousSpeech;
+                                            previousSpeech = NULL;
+                                            }
                                         }
                                     else {
                                         // no *map metadata in our speech
@@ -21193,6 +22056,10 @@ void LivingLifePage::step() {
                                             }
                                         }
                                     }
+                                if( previousSpeech != NULL ) {
+                                    delete [] previousSpeech;
+                                    previousSpeech = NULL;
+                                    }
                                 }
                             
                             break;
@@ -22586,6 +23453,7 @@ void LivingLifePage::step() {
                 }
             }
 
+        if( ! locationSlipsEnabled )
         if( o->currentSpeech == NULL ) {
             // check if we have an arrow to them
             
@@ -24017,6 +24885,9 @@ void LivingLifePage::makeActive( char inFresh ) {
         }
     
 
+    mLocationSlips.deleteAll();
+
+
     mLastKnownNoteLines.deallocateStringElements();
     mErasedNoteChars.deleteAll();
     mErasedNoteCharOffsets.deleteAll();
@@ -27664,6 +28535,7 @@ static void showPlayerLabel( LiveObject *inPlayer, const char *inLabel,
 
 static char commandTyped( char *inTyped, const char *inCommandTransKey ) {
     const char *command = translate( inCommandTransKey );
+    if( command == NULL ) command = inCommandTransKey;
     
     if( strstr( inTyped, command ) == inTyped ) {
         
@@ -28092,8 +28964,18 @@ void LivingLifePage::keyDown( unsigned char inASCII ) {
                                         gameObjects.getElement( f );
                                     if( famO->isGeneticFamily ) {
                                         
-                                        showPlayerLabel( famO, famLabel,
-                                                         eta );
+                                        if( locationSlipsEnabled ){
+                                            addTempLocationSlip(
+                                                famO->xd, famO->yd,
+                                                true,
+                                                famO->id,
+                                                NULL,
+                                                famO->age*60 );
+                                            }
+                                        else {
+                                            showPlayerLabel( famO, famLabel,
+                                                             eta );
+                                            }
                                         }
                                     }
                                 }
@@ -28111,6 +28993,7 @@ void LivingLifePage::keyDown( unsigned char inASCII ) {
                                 SimpleVector<int> ourLeadershipChain =
                                     getOurLeadershipChain();
 
+                                if( ! locationSlipsEnabled )
                                 for( int f=0; 
                                      f<ourLeadershipChain.size(); f++ ) {
                                     
diff --git a/gameSource/LivingLifePage.h b/gameSource/LivingLifePage.h
index efec2fff6..3abd83907 100644
--- a/gameSource/LivingLifePage.h
+++ b/gameSource/LivingLifePage.h
@@ -483,6 +483,31 @@ typedef struct HomeArrow {
         
 
 
+typedef struct LocationSlip {
+        GridPos pos;
+        char ancient;
+        char temporary;
+        char labeled;
+        char showDistance;
+        char tempPerson;
+        int personID;
+        const char *tempPersonKey;
+        // 0 if not set
+        double temporaryExpireETA;
+        double distanceExpireETA;
+        double creationTime;
+        double pointerBounce;
+        float pointerFade;
+        FloatColor slipColor;
+        HomeArrow arrowStates[ NUM_HOME_ARROWS ];
+        SimpleVector<char*> previousDistStrings;
+        SimpleVector<float> previousDistFades;
+        doublePair hideOffset;
+        doublePair posOffset;
+        doublePair targetOffset;
+    } LocationSlip;
+
+
 // for objects moving in-transit in special cases where we can't store
 // them in the map (if they're moving onto an occupied space that should
 // only change when they're done moving)
@@ -741,6 +766,9 @@ class LivingLifePage : public GamePage, public ActionListener {
 
         double mHomeSlipShowDelta[2];
 
+
+        SimpleVector<LocationSlip> mLocationSlips;
+
         
         SimpleVector<char*> mLastKnownNoteLines;
         
@@ -1151,6 +1179,16 @@ class LivingLifePage : public GamePage, public ActionListener {
         char isBadBiome( int inMapI );
 
         void drawHomeSlip( doublePair inSlipPos, int inIndex = 0 );
+        void drawLocationSlip( int inIndex );
+        void removeLocationSlip( int inX, int inY );
+        void setLocationSlipExpiration( int seconds );
+        void addLocationSlip( int inX, int inY );
+        void addTempLocationSlip( int inX, int inY, char inPerson, int inPersonID, const char* inPersonKey, int inAge );
+        void updateLocationSlip( LocationSlip* locationSlip, int inX, int inY );
+        void updatePersonLocationSlip( int inPersonID, int inX, int inY );
+        void addPropertyLocationSlip( int inX, int inY );
+        void addAncientLocationSlip( int inX, int inY, int monumentID );
+        void addHomelandLocationSlip( int inX, int inY, const char* inFamilyName );
         
 
         void updateLeadership();
diff --git a/gameSource/settings/wonlife-plus/locationSlipColors.ini b/gameSource/settings/wonlife-plus/locationSlipColors.ini
new file mode 100644
index 000000000..375fecd6e
--- /dev/null
+++ b/gameSource/settings/wonlife-plus/locationSlipColors.ini
@@ -0,0 +1,6 @@
+839 255 227 50
+2486 244 16 8
+2484 244 16 8
+2481 244 16 8
+2482 244 16 8
+4745 255 139 0
diff --git a/gameSource/settings/wonlife-plus/locationSlipsEnabled.ini b/gameSource/settings/wonlife-plus/locationSlipsEnabled.ini
new file mode 100644
index 000000000..56a6051ca
--- /dev/null
+++ b/gameSource/settings/wonlife-plus/locationSlipsEnabled.ini
@@ -0,0 +1 @@
+1
\ No newline at end of file
diff --git a/gameSource/settings/wonlife-vanilla/locationSlipColors.ini b/gameSource/settings/wonlife-vanilla/locationSlipColors.ini
new file mode 100644
index 000000000..375fecd6e
--- /dev/null
+++ b/gameSource/settings/wonlife-vanilla/locationSlipColors.ini
@@ -0,0 +1,6 @@
+839 255 227 50
+2486 244 16 8
+2484 244 16 8
+2481 244 16 8
+2482 244 16 8
+4745 255 139 0
diff --git a/gameSource/settings/wonlife-vanilla/locationSlipsEnabled.ini b/gameSource/settings/wonlife-vanilla/locationSlipsEnabled.ini
new file mode 100644
index 000000000..c22708346
--- /dev/null
+++ b/gameSource/settings/wonlife-vanilla/locationSlipsEnabled.ini
@@ -0,0 +1 @@
+0
\ No newline at end of file
diff --git a/gameSource/settings/wonlife-wondible/locationSlipColors.ini b/gameSource/settings/wonlife-wondible/locationSlipColors.ini
new file mode 100644
index 000000000..375fecd6e
--- /dev/null
+++ b/gameSource/settings/wonlife-wondible/locationSlipColors.ini
@@ -0,0 +1,6 @@
+839 255 227 50
+2486 244 16 8
+2484 244 16 8
+2481 244 16 8
+2482 244 16 8
+4745 255 139 0
diff --git a/gameSource/settings/wonlife-wondible/locationSlipsEnabled.ini b/gameSource/settings/wonlife-wondible/locationSlipsEnabled.ini
new file mode 100644
index 000000000..56a6051ca
--- /dev/null
+++ b/gameSource/settings/wonlife-wondible/locationSlipsEnabled.ini
@@ -0,0 +1 @@
+1
\ No newline at end of file
